<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>博客 on G-Hung的博客</title><link>https://blog.yzyy.de/tags/%E5%8D%9A%E5%AE%A2/</link><description>Recent content in 博客 on G-Hung的博客</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 04 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.yzyy.de/tags/%E5%8D%9A%E5%AE%A2/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello, Typo!</title><link>https://blog.yzyy.de/post/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link><pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/post/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid><description>&lt;p&gt;一切都源于在论坛上看到了一个简洁的博客主题，一个以内容为上的博客主题。看到的那一刻就默默在笔记上记下了一个TODO: 搭建一个博客。&lt;/p&gt;
&lt;p&gt;在看到typo之前，没想过搭建一个个人博客，想着有一个本地化的笔记内容已经够了。加上在网上冲浪，看到的无数个已经被遗忘在互联网的角落里蒙灰的博客。我想，凭我的精力很难一直有内容产出。所以我的博客计划搁置了一段时间。&lt;/p&gt;
&lt;p&gt;但我后来想了想，正是这些蒙灰的博客，才真的帮到过我。可能内容简单，甚至有些简陋，但偏偏就是他们记录下了某个冷门问题的解决过程，或者某一步的细节，让我得以顺利过关。&lt;/p&gt;
&lt;p&gt;反过来看，这也是它们存在的意义吧。博客不一定要有多少更新、多少阅读量、有多么高大上，只要在某个时刻它帮到了某个人，那它就很有价值。所以，看似被遗忘的内容，其实都还藏着被再次发现和利用的可能——我自己就是这样真实受益的那个人。&lt;/p&gt;
&lt;p&gt;下面记录我搭建这个博客的过程吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 class="heading" id="工作主流程"&gt;
 工作主流程
 &lt;a class="anchor" href="#%e5%b7%a5%e4%bd%9c%e4%b8%bb%e6%b5%81%e7%a8%8b"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="|525" src="https://webp.050612.xyz/2025/07/20250715234651888.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;笔记软件: &lt;a href="https://obsidian.md%22/"&gt;Obsidian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;框架: &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;主题: &lt;a href="https://github.com/tomfran/typo"&gt;typo:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;远程同步: &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;渲染 &amp;amp; 发布: Github Action &amp;amp; Github Page&lt;/li&gt;
&lt;li&gt;Dns 托管: &lt;a href="https://cloudflare.com/"&gt;Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 class="heading" id="搭建步骤"&gt;
 搭建步骤
 &lt;a class="anchor" href="#%e6%90%ad%e5%bb%ba%e6%ad%a5%e9%aa%a4"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 class="heading" id="hugo"&gt;
 Hugo
 &lt;a class="anchor" href="#hugo"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;像我这样先选了主题，再了解博客框架的人应该不多吧。Hugo 是一个使用 Go 语言编写的&lt;strong&gt;静态网站生成器&lt;/strong&gt;，以其&lt;strong&gt;高性能、易用性和灵活性&lt;/strong&gt;而广受欢迎。可以把 Markdown 文件转化成 HTML 文件。但是静态博客也有缺点，维护难，可扩展性较弱，上手门槛高，希望我能坚持下去吧。&lt;/p&gt;
&lt;h3 class="heading" id="hugo下载安装"&gt;
 Hugo下载安装
 &lt;a class="anchor" href="#hugo%e4%b8%8b%e8%bd%bd%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先在 &lt;a href="https://github.com/gohugoio/hugo/releases"&gt;Release&lt;/a&gt; 根据操作系统以及指令集下载最新版本的 Hugo 压缩包
Windows 则选择例如: &lt;code&gt;hugo_0.148.1_windows-amd64.zip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择合适的路径进行解压&lt;/li&gt;
&lt;li&gt;添加环境变量，在搜索框搜索&lt;code&gt;环境变量&lt;/code&gt;，根据解压路径配置hugo.exe所在的路径到PATH&lt;/li&gt;
&lt;li&gt;打开一个终端，输入&lt;code&gt;hugo version&lt;/code&gt;验证&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class="heading" id="初始化hugo结构"&gt;
 初始化Hugo结构
 &lt;a class="anchor" href="#%e5%88%9d%e5%a7%8b%e5%8c%96hugo%e7%bb%93%e6%9e%84"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;hugo new site xxxx&lt;/code&gt;创建网站初始结构。
初始结构如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;archetypes&lt;/strong&gt;：存放用 hugo 命令新建的 Markdown 文件应用的 front matter 模版&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt;：存放内容页面，比如「博客」、「读书笔记」等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;layouts&lt;/strong&gt;：存放定义网站的样式，写在&lt;code&gt;layouts&lt;/code&gt;文件下的样式会覆盖安装的主题中的 &lt;code&gt;layouts&lt;/code&gt;文件同名的样式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;static&lt;/strong&gt;：存放所有静态文件，如图片&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;：存放创建站点时 Hugo 使用的其他数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public&lt;/strong&gt;：存放 Hugo 生成的静态网页&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;themes&lt;/strong&gt;：存放主题文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;config.toml&lt;/strong&gt;：网站配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class="heading" id="typo"&gt;
 Typo
 &lt;a class="anchor" href="#typo"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;正像github上介绍的，Typo 是一个以简洁为基础的主题。目标是创建一个以内容为中心，没有任何其他多余内容的网站。直观感受是具有纯粹的阅读体验。&lt;/p&gt;
&lt;h3 class="heading" id="typo主题配置"&gt;
 Typo主题配置
 &lt;a class="anchor" href="#typo%e4%b8%bb%e9%a2%98%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;不同主题一般都在相应的wiki中给出了配置指南。按照流程配置即可。需要格外注意的是，建议直接使用主题给出的&lt;code&gt;hugo.toml&lt;/code&gt; 配置文件作为基础，在这个基础之上进行配置可以避免一些奇怪的问题。&lt;/p&gt;
&lt;h3 class="heading" id="本地测试"&gt;
 本地测试
 &lt;a class="anchor" href="#%e6%9c%ac%e5%9c%b0%e6%b5%8b%e8%af%95"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;到这一步即可进行本地测试，在博客主文件夹下运行命令:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再打开输出的网址即可&lt;/p&gt;
&lt;h2 class="heading" id="工作流搭建"&gt;
 工作流搭建
 &lt;a class="anchor" href="#%e5%b7%a5%e4%bd%9c%e6%b5%81%e6%90%ad%e5%bb%ba"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建 2 个 GitHub 仓库
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;博客源仓库&lt;/strong&gt;：储存所有 Markdown 源文件（博客内容），和博客中用到的图片等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Pages 仓库&lt;/strong&gt;：储存由 Hugo 从Markdown 文件生成的 HTML 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将在&lt;strong&gt;博客源仓库&lt;/strong&gt;中 Hugo 生成的静态 HTML 文件部署到 &lt;strong&gt;GitHub Pages 仓库&lt;/strong&gt;中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我学习替他博主的思路。我将博客源码存放到一个private repo里。但也可以将源码直接放到github pages repo中（只需要单独一个远程仓库即可），但这样其他人能获取文章的源文件。&lt;/p&gt;
&lt;h3 class="heading" id="创建博客源仓库"&gt;
 创建博客源仓库
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e5%8d%9a%e5%ae%a2%e6%ba%90%e4%bb%93%e5%ba%93"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;命名&lt;strong&gt;博客源仓库&lt;/strong&gt;（whatever you want）&lt;/li&gt;
&lt;li&gt;勾选 &lt;strong&gt;Private&lt;/strong&gt;，设置为私有仓库。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class="heading" id="创建-github-page-仓库"&gt;
 创建 GitHub Page 仓库
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba-github-page-%e4%bb%93%e5%ba%93"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;命名 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 仓库，这个仓库必须使用特殊的命名格式 &lt;code&gt;&amp;lt;username.github.io&amp;gt;&lt;/code&gt;， &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; 是自己的 GitHub 的用户名。&lt;/li&gt;
&lt;li&gt;勾选 &lt;strong&gt;Public&lt;/strong&gt;，设置为公开仓库。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class="heading" id="添加cname文件到static文件夹使用自定义域名的额外步骤"&gt;
 添加CNAME文件到static/文件夹（使用自定义域名的额外步骤）
 &lt;a class="anchor" href="#%e6%b7%bb%e5%8a%a0cname%e6%96%87%e4%bb%b6%e5%88%b0static%e6%96%87%e4%bb%b6%e5%a4%b9%e4%bd%bf%e7%94%a8%e8%87%aa%e5%ae%9a%e4%b9%89%e5%9f%9f%e5%90%8d%e7%9a%84%e9%a2%9d%e5%a4%96%e6%ad%a5%e9%aa%a4"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;如果选择为Github Pages使用自定义域名，则这个步骤必须要做，否则自定义域名会隔三差五失效。&lt;/p&gt;
&lt;p&gt;原因在于，当在&lt;code&gt;YOUR_NAME.github.io&lt;/code&gt;这个仓库的设置里手动添加自定义域名的时候，其实是在github仓库新增了一个CNAME文件，里面内容为自定义域名。&lt;/p&gt;
&lt;p&gt;但是每次推送触发actions后，hugo命令都会生成一个全新的public文件夹并强制覆盖到page仓库。这个操作都会覆盖掉github上的CNAME，导致域名失效。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;hugo&lt;/code&gt; 构建网站时，它会把 &lt;code&gt;static&lt;/code&gt; 文件夹里的&lt;strong&gt;所有内容&lt;/strong&gt;，原封不动地、完整地复制到最终生成的 &lt;code&gt;public&lt;/code&gt; 文件夹的根目录下。所以在static文件夹下添加一个CNAME文件即可。&lt;/p&gt;
&lt;h3 class="heading" id="推送到博客源仓库"&gt;
 推送到博客源仓库
 &lt;a class="anchor" href="#%e6%8e%a8%e9%80%81%e5%88%b0%e5%8d%9a%e5%ae%a2%e6%ba%90%e4%bb%93%e5%ba%93"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建gitignore文件&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-.gitignore" data-lang=".gitignore"&gt;# Hugo
public/
.hugo_build.lock
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="2"&gt;
&lt;li&gt;推送到远程仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;# === 项目初始化与首次提交 ===
echo &amp;#34;# my-blog-source&amp;#34; &amp;gt;&amp;gt; README.md
git init
git add .
git commit -m &amp;#34;first commit&amp;#34;
git branch -M main
git remote add origin https://github.com/xxx/xxx.git
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;&lt;h2 class="heading" id="自动发布内容"&gt;
 自动发布内容
 &lt;a class="anchor" href="#%e8%87%aa%e5%8a%a8%e5%8f%91%e5%b8%83%e5%86%85%e5%ae%b9"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;使用Github Actions功能实现提交源码后自动发布。&lt;/p&gt;
&lt;h3 class="heading" id="生成actions-secrets"&gt;
 生成Actions secrets
 &lt;a class="anchor" href="#%e7%94%9f%e6%88%90actions-secrets"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成Personal access tokens 首先点击github头像在下拉栏里进入Setting-&amp;gt;Developer Settings-&amp;gt;Personal access tokens -&amp;gt; tokens (classic)












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716010922097.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;

选择Generate new token，点击Generate token生成token，并先复制保存该token。(这个token只有显示一次，所以一定要复制保存)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成Actions secrets 接下来在源码repo中添加上面的personal access token：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进入repo的Settings-&amp;gt;Secrets and variable一栏，选择New repository secret












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716011218953.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;名称自取，Secret复制上面生成的Personal access tokens












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716011226467.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 class="heading" id="配置actions文件"&gt;
 配置actions文件
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%aeactions%e6%96%87%e4%bb%b6"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;在repo根目录新建嵌套的两个文件夹.github/workflows&lt;/p&gt;
&lt;p&gt;在workflows里新建一个后缀为.yml的配置文件，名字自取。&lt;/p&gt;
&lt;p&gt;写进去以下配置（从hugo官方文档修改而来）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;name: github pages &lt;span style="color:#888;font-style:italic"&gt;# 名字自取&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;on:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; push:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; branches:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - main &lt;span style="color:#888;font-style:italic"&gt;# 这里的意思是当 main分支发生push的时候，运行下面的jobs，这里先改为github-actions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;jobs:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; deploy: &lt;span style="color:#888;font-style:italic"&gt;# 任务名自取&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; runs-on: ubuntu-latest	# 在什么环境运行任务
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; steps:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - uses: actions/checkout@v2	# 引用actions/checkout这个action，与所在的github仓库同名
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; with:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; submodules: &lt;span style="font-weight:bold;text-decoration:underline"&gt;true&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# Fetch Hugo themes (true OR recursive) 获取submodule主题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fetch-depth: 0 &lt;span style="color:#888;font-style:italic"&gt;# Fetch all history for .GitInfo and .Lastmod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - name: Setup Hugo	# 步骤名自取
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uses: peaceiris/actions-hugo@v2	# hugo官方提供的action，用于在任务环境中获取hugo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; with:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; hugo-version: &lt;span style="color:#666;font-style:italic"&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;	&lt;span style="color:#888;font-style:italic"&gt;# 获取最新版本的hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# extended: true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - name: Build
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; run: hugo --minify	# 使用hugo构建静态网页
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - name: Deploy
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uses: peaceiris/actions-gh-pages@v3	# 一个自动发布github pages的action
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; with:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同repo的情况，不能用于发布到其他repo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; external_repository: 用户名/page仓库名	# 发布到哪个repo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; personal_token: ${{ secrets.token名 }}	# 发布到其他repo需要提供上面生成的personal access token
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; publish_dir: ./public	# 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; publish_branch: main	# 发布到哪个branch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;yml文件中只需要改&lt;code&gt;external_repository&lt;/code&gt;为自己的github page仓库，&lt;code&gt;personal_token: ${{ secrets.XXX }}&lt;/code&gt; 改成前面步骤生成Actions Secrets中取的名称。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;至此，折腾了半天的自动化流程，总算是搭建完成了。&lt;/p&gt;
&lt;p&gt;现在，我终于可以再关心部署的流程细节，把精力放回到最初的目的上——去记录，去成为那些曾经帮助过我的、‘蒙灰的博客’中的一员。&lt;/p&gt;
&lt;p&gt;也许我的文章也会很简单，甚至有些简陋，也可能会在未来的某个时刻被遗忘在角落里。但只要它能在某个时刻，帮到某个卡在同样问题上的人，让他得以顺利过关，那这一切的折腾就都值了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hello, Typo！&lt;/strong&gt;&lt;/p&gt;</description></item></channel></rss>