<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on G-Hung的博客</title><link>https://blog.yzyy.de/</link><description>Recent content in Home on G-Hung的博客</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 30 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.yzyy.de/index.xml" rel="self" type="application/rss+xml"/><item><title>SyncClipboard：替代微信输入法同步功能的最佳解决方案</title><link>https://blog.yzyy.de/explore/self-host/syncclipboard%E6%9B%BF%E4%BB%A3%E5%BE%AE%E4%BF%A1%E8%BE%93%E5%85%A5%E6%B3%95%E5%90%8C%E6%AD%A5%E5%8A%9F%E8%83%BD%E7%9A%84%E6%9C%80%E4%BD%B3%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Wed, 30 Jul 2025 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/explore/self-host/syncclipboard%E6%9B%BF%E4%BB%A3%E5%BE%AE%E4%BF%A1%E8%BE%93%E5%85%A5%E6%B3%95%E5%90%8C%E6%AD%A5%E5%8A%9F%E8%83%BD%E7%9A%84%E6%9C%80%E4%BD%B3%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>&lt;p&gt;我一直向往那种在单一屏幕上无缝操控所有设备的终极体验。但由于iOS系统封闭的生态，无法在Windows实现。退而求其次，我将目光投向了解决日常最高频的痛点——跨设备剪贴板同步。&lt;/p&gt;
&lt;p&gt;在国民级软件的微信的大力推广下，我不得不发现了「小而美」的微信输入法。而微信输入法的一大亮点功能就有剪切板同步。半年前，我兴冲冲在各个设备都安装了微信输入法，使用体验还真不错，十分便捷，简约而不简单。&lt;/p&gt;
&lt;p&gt;但是，两个致命的缺陷逐渐让我浑身不自在，其一，作为一款输入法，它竟无法自定义用户词库，这对于追求效率的用户来说是个硬伤；其二，也是更让我警惕的——它建立在“用隐私换方便”的模式之上。每当我复制密码、API密钥或是个人敏感信息，并意识到这些数据正毫无保留地流向微信的服务器时，那种心头一紧的感觉便挥之不去。不是说自己的数据有多重要，但总有一股难受的感觉。&lt;/p&gt;
&lt;p&gt;某天闲下来的时候想到：我之前的思路太局限了。我将希望完全寄托于各大厂商的第三方输入法来实现互联，却因此忽略了隐私的代价，也忘记了去拥抱开源。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 class="heading" id="syncclipboard主要功能"&gt;
 SyncClipboard主要功能
 &lt;a class="anchor" href="#syncclipboard%e4%b8%bb%e8%a6%81%e5%8a%9f%e8%83%bd"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;来自GitHub官方&lt;a href="https://github.com/Jeric-X/SyncClipboard"&gt;SyncClipboard: 跨平台剪贴板同步方案&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;剪贴板同步，支持「文字」、「图片」和「文件」。&lt;strong&gt;服务器/客户端架构&lt;/strong&gt;，可以使用客户端内置服务器、独立部署服务器，也可以使用支持WebDAV的网盘作为服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化图片类型的剪贴板，功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从任意位置复制图片时，可以直接向文件系统粘贴图片文件，反之亦然&lt;/li&gt;
&lt;li&gt;从浏览器复制图片后，后台下载原图到本地，解决无法从浏览器拷贝动态图的问题（大多网站有认证，适用范围有限，支持bilibili动态图片）&lt;/li&gt;
&lt;li&gt;从文件系统复制较新格式类型的图片文件时（webp/heic等），在剪贴板内储存gif或jpg格式，用于直接向支持图片的文本框粘贴图片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持所有主流平台，包括 &lt;strong&gt;Windows, macOS, Linux, Android, 和 iOS&lt;/strong&gt;，真正实现了全平台覆盖。&lt;/li&gt;
&lt;li&gt;使用「服务器/客户端」架构，不受局域网的限制，适合网络复杂的情形（如校园网）。&lt;/li&gt;
&lt;li&gt;使用自部署的中转服务器，无隐私风险&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class="heading" id="服务端搭建"&gt;
 服务端搭建
 &lt;a class="anchor" href="#%e6%9c%8d%e5%8a%a1%e7%ab%af%e6%90%ad%e5%bb%ba"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;准备工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;服务器&lt;/strong&gt;：由于需要服务器中转，延迟越低越好，但没有这么高的要求，我使用日本的服务器，无延迟体感。内存使用100MB左右。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;域名&lt;/strong&gt;：用于开启 HTTPS，保障数据传输安全性。&lt;/li&gt;
&lt;li&gt;安装&lt;strong&gt;Nginx、Docker&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;话不多说，直接用最简单的 &lt;code&gt;docker-compose&lt;/code&gt; + Nginx 反代方案开干。&lt;/p&gt;
&lt;h3 class="heading" id="编辑docker-composeyml"&gt;
 编辑docker-compose.yml
 &lt;a class="anchor" href="#%e7%bc%96%e8%be%91docker-composeyml"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;登录服务器，创建一个工作目录并进入，然后创建 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir syncclipboard &amp;amp;&amp;amp; cd syncclipboard
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo vim docker-compose.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;将以下内容写入&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;services:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; syncclipboard-server:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image: jericx/syncclipboard-server:latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; container_name: syncclipboard-server
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; restart: unless-stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ports:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;127.0.0.1:5033:5033&amp;#34;&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 左边的5133可以改成服务器上没有用过的其他端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SYNCCLIPBOARD_USERNAME=your_username
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SYNCCLIPBOARD_PASSWORD=your_pswd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 自动更新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; watchtower:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image: containrrr/watchtower:latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; container_name: watchtower_sync
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; restart: unless-stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - TZ=Asia/Shanghai 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - /var/run/docker.sock:/var/run/docker.sock
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; command: --cleanup --schedule &amp;#34;0 0 4 * * *&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Tips:
这里踩了个坑，密码不建议包含特殊符号，例如 * $等，会导致验证失败。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol start="3"&gt;
&lt;li&gt;运行&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker compose up -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class="heading" id="配置nginx"&gt;
 配置Nginx
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%aenginx"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;不要忘记将域名解析到服务器，因为有很多种配置Nginx的方式，这里只给出我写的Nginx配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# Server block for HTTP to HTTPS redirection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;listen&lt;/span&gt; 80;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;server_name&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;clip.yourdomain.com&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# ⚠️ 替换成你的域名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# Redirect all other HTTP traffic to HTTPS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;location&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;return&lt;/span&gt; 301 &lt;span style="color:#666;font-style:italic"&gt;https://&lt;/span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$host$request_uri&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# Server block for HTTPS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;listen&lt;/span&gt; 443 &lt;span style="color:#666;font-style:italic"&gt;ssl&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;http2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;server_name&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;clip.yourdomain.com&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# ⚠️ 替换成你的域名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;client_max_body_size&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;1024M&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- SSL Certificate Configuration ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_certificate&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/etc/ssl/certs/clip.yourdomain.com.pem&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# ⚠️ 替换成你的证书路径
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_certificate_key&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/etc/ssl/private/clip.yourdomain.com.key&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# ⚠️ 替换成你的私钥路径
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- SSL Security Enhancements ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_protocols&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;TLSv1.2&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;TLSv1.3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;on&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_ciphers&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_ecdh_curve&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;secp384r1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_session_cache&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;shared:SSL:10m&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_session_timeout&lt;/span&gt; 10m;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_stapling&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;on&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_stapling_verify&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;on&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# Add HSTS header to force HTTPS on the client side
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;add_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Strict-Transport-Security&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;max-age=63072000&lt;/span&gt;; &lt;span style="font-weight:bold;text-decoration:underline"&gt;includeSubDomains&lt;/span&gt;; &lt;span style="font-weight:bold;text-decoration:underline"&gt;preload&amp;#34;&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;always&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- Reverse Proxy Configuration ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;location&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 代理到 docker-compose 中映射的宿主机端口 1265
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_pass&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;http://127.0.0.1:5033&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- WebSocket Support ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_http_version&lt;/span&gt; 1&lt;span style="color:#666;font-style:italic"&gt;.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Upgrade&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$http_upgrade&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Connection&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;upgrade&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- Standard Proxy Headers ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Host&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$host&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Real-IP&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$remote_addr&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Forwarded-For&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$scheme&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_redirect&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;off&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置好后，检查 Nginx 语法并重载服务：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo nginx -t
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl reload nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此可以使用域名访问，输入设置的username以及password，看到以下提示证明成功部署：












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="5e3qxdjl.jir.png" src="https://webp.050612.xyz/2025/07/5e3qxdjl.jir.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 class="heading" id="客户端使用"&gt;
 客户端使用
 &lt;a class="anchor" href="#%e5%ae%a2%e6%88%b7%e7%ab%af%e4%bd%bf%e7%94%a8"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;查看GitHub官方教程即可：&lt;a href="https://github.com/Jeric-X/SyncClipboard?tab=readme-ov-file#%E5%AE%A2%E6%88%B7%E7%AB%AF"&gt;SyncClipboard #客户端使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里提到「Windows」以及「ios」：&lt;/p&gt;
&lt;h3 class="heading" id="windows"&gt;
 Windows
 &lt;a class="anchor" href="#windows"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;a href="https://github.com/Jeric-X/SyncClipboard/releases/latest"&gt;Release&lt;/a&gt;页面下载名字以&lt;code&gt;SyncClipboard_win_&lt;/code&gt;开头的zip文件，解压后运行&lt;code&gt;SyncClipboard.exe&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器配置：












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="kh3lmwbs.ecs.png" src="https://webp.050612.xyz/2025/07/kh3lmwbs.ecs.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图片粘贴配置：












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="mimpvon3.lyl.png" src="https://webp.050612.xyz/2025/07/mimpvon3.lyl.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查服务状态：
应为 ✔ ❌ ✔ ✔












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="tetsv1qm.hun.png" src="https://webp.050612.xyz/2025/07/20250731010654657.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class="heading" id="ios"&gt;
 iOS
 &lt;a class="anchor" href="#ios"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;手动同步，导入这个&lt;a href="https://www.icloud.com/shortcuts/ecd4200276ba4cc2b0839462215eb1d8"&gt;快捷指令&lt;/a&gt;，手动触发上传或下载&lt;/li&gt;
&lt;li&gt;自动同步，导入这个&lt;a href="https://www.icloud.com/shortcuts/542ad23b33314b36807c05a5d8aa5c22"&gt;快捷指令&lt;/a&gt;，运行后设备会自动在后台同步剪贴板内容，此快捷指令将执行无限时长，需要手动关闭，你还可以手动修改同步后是否发送系统通知、查询的间隔秒数&lt;/li&gt;
&lt;li&gt;自动上传短信验证码，参考这个discussion中的视频教程 &lt;a href="https://github.com/Jeric-X/SyncClipboard/discussions/60"&gt;#60&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我选择使用手动触发，配合辅助触控中的「轻点背面」，很好用。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;至此，试试吧，交互的过程是十分优雅的：拿起手机只需轻叩背面，即可同步文字到剪切板、下载图片甚至文件。&lt;/p&gt;
&lt;p&gt;经过一番折腾，终于找回那份掌控自己数据的安心感。&lt;/p&gt;
&lt;p&gt;也请相信，在看似被巨头垄断的数字世界里，总有另一条路可走。那是一条由开源精神铺就的、通往真正自由的道路。我们需要的，仅仅是多一点探索的勇气。&lt;/p&gt;</description></item><item><title>如何让两个 docker-compose 项目中的容器互相通信</title><link>https://blog.yzyy.de/post/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%B8%A4%E4%B8%AA-docker-compose-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8%E4%BA%92%E7%9B%B8%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/post/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%B8%A4%E4%B8%AA-docker-compose-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8%E4%BA%92%E7%9B%B8%E9%80%9A%E4%BF%A1/</guid><description>&lt;p&gt;由于部署了很多中转代理服务以及各种客户端，常常会遇到多个docker容器间通信的问题。例如，为了解决New-API以及OpenWebUI两个容器间的通信，减少API时延，之前都是采用放在同一个docker-compose中管理，在内部创建一个网络并接入。&lt;/p&gt;
&lt;p&gt;这样也可以实现使用&lt;code&gt;http://newapi:3000/v1&lt;/code&gt;的优雅方式访问。&lt;/p&gt;
&lt;p&gt;随着docker-compose文件的越来越长，维护难度越来越高，越来越像一个大杂烩。我又学习了另外一种创建外部网络的方式。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;思路是：我们创建一个独立于任何 docker-compose 文件的共享网络，然后让两个不同的 docker-compose 项目都连接到这个网络上。&lt;/p&gt;
&lt;h2 class="heading" id="创建共享网络"&gt;
 创建共享网络
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e5%85%b1%e4%ba%ab%e7%bd%91%e7%bb%9c"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;运行以下命令来创建一个新的桥接网络。我们就叫它 shared-net。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker network create shared-net
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个网络现在独立存在，不受任何 docker-compose 文件的 up 或 down 命令影响。&lt;/p&gt;
&lt;h2 class="heading" id="修改不同容器所在的-docker-composeyml"&gt;
 修改不同容器所在的 docker-compose.yml
 &lt;a class="anchor" href="#%e4%bf%ae%e6%94%b9%e4%b8%8d%e5%90%8c%e5%ae%b9%e5%99%a8%e6%89%80%e5%9c%a8%e7%9a%84-docker-composeyml"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;编辑容器的 docker-compose.yml 文件，让它连接到我们刚刚创建的 shared-net。&lt;/p&gt;
&lt;p&gt;只需要编辑两个地方：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 例如在 new-api 项目的 docker-compose.yml 文件中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;services:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; new-api:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# ... (它所有现有的配置都保持不变) ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; networks: &lt;span style="color:#888;font-style:italic"&gt;# 1.给 new-api 服务添加这个 networks 块&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - some-other-network &lt;span style="color:#888;font-style:italic"&gt;# 它可能已经连接了其他网络，保留它们&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - shared-net &lt;span style="color:#888;font-style:italic"&gt;# 额外连接到我们的共享网络&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 2. 在文件末尾声明这个网络是外部的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;networks:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; some-other-network:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; shared-net:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; external: &lt;span style="font-weight:bold;text-decoration:underline"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;之后，重启容器。&lt;/p&gt;
&lt;p&gt;现在，因为不同容器都在 shared-net 这个网络里，它们可以通过容器名直接通信。要访问 「new-api」 ，地址应该填写：&lt;code&gt;http://new-api:3000&lt;/code&gt;。&lt;/p&gt;</description></item><item><title>新购一台8GB的VDS与搬家</title><link>https://blog.yzyy.de/post/%E6%96%B0%E8%B4%AD%E4%B8%80%E5%8F%B08gb%E7%9A%84vds/</link><pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/post/%E6%96%B0%E8%B4%AD%E4%B8%80%E5%8F%B08gb%E7%9A%84vds/</guid><description>&lt;p&gt;在7月8日，人称“小阿里”的云服务器提供商「ClawCloud」宣布下线支持中国优化线路的香港服务器。这个公告中还提到了三个赔偿方案，其中两个为不同的退款方案，这里重点关注方案二：可以免费迁移到新加坡或日本节点，并且**原本机器的内存容量还会直接翻倍。&lt;/p&gt;
&lt;p&gt;这就导致了市场上出现了2核8GB的线路良好的新加坡\日本机器，并且价格为4$/m，有没有很心动，我反正是心动了。&lt;/p&gt;
&lt;p&gt;回想起那夜远程开发使用claude code内存爆炸，狼狈重启。那夜为了安装OpenWebUI，一口气开了2g的swap。畏畏缩缩不敢使用动态博客、不敢使用1panel等运维面板。怕了真怕了，😭狼狈的我含泪溢价一百块收下一台机器，只希望能用的长久吧。&lt;/p&gt;
&lt;p&gt;以下记录一下我拿到一台新机器会做什么以及迁移过程。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 class="heading" id="安全"&gt;
 安全
 &lt;a class="anchor" href="#%e5%ae%89%e5%85%a8"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;最重要的当然是安全，之前已经给出了服务器的安全论，请看&lt;a href="https://blog.yzyy.de/explore/%E6%9C%8D%E5%8A%A1%E5%99%A8/vps%E5%9F%BA%E6%9C%AC%E5%AE%89%E5%85%A8%E6%8E%AA%E6%96%BD/"&gt;VPS基础安全配置实践指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 class="heading" id="安装docker"&gt;
 安装docker
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85docker"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;因为多数服务是运行在docker上的，安装docker &amp;amp; docker compose是必不可少的。&lt;/p&gt;
&lt;h2 class="heading" id="ssl证书"&gt;
 SSL证书
 &lt;a class="anchor" href="#ssl%e8%af%81%e4%b9%a6"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;不是简单地迁移已有证书就行了，还要迁移配置好的自动续签服务，经过查看在一台机器上有四个域名的自动续签服务，但是我准备瘦身一下，有些域名快到期了。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/certificates.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 class="heading" id="自动续签改进后的方案"&gt;
 自动续签改进后的方案
 &lt;a class="anchor" href="#%e8%87%aa%e5%8a%a8%e7%bb%ad%e7%ad%be%e6%94%b9%e8%bf%9b%e5%90%8e%e7%9a%84%e6%96%b9%e6%a1%88"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;发现之前的多个域名的自动续签管理十分繁琐，与AI交流后获得了一个更为简洁的可行的方案，简化了操作与配置。&lt;/p&gt;
&lt;h4 class="heading" id="cloudflare-api"&gt;
 Cloudflare API
 &lt;a class="anchor" href="#cloudflare-api"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;使用 Cloudflare DNS 模式需要准备:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Account ID&lt;/li&gt;
&lt;li&gt;API Token&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 class="heading" id="获取-account-id"&gt;
 获取 Account ID
 &lt;a class="anchor" href="#%e8%8e%b7%e5%8f%96-account-id"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;这两种 ID 直接在 Overview 页就能找到。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="cloudflare_account_id" src="https://webp.050612.xyz/2025/07/cloudflare_account_id.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h5 class="heading" id="获取-api-token"&gt;
 获取 API Token
 &lt;a class="anchor" href="#%e8%8e%b7%e5%8f%96-api-token"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;Overview 页点击 &lt;code&gt;获取您的 API 令牌&lt;/code&gt; 进入 API Tokens 页。&lt;/p&gt;
&lt;p&gt;点击 API Tokens 项旁边 &lt;code&gt;创建令牌&lt;/code&gt; 按钮，接着选择 &lt;code&gt;编辑区域 DNS&lt;/code&gt; 的模板，点击 &lt;code&gt;使用模板&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="image" src="https://webp.050612.xyz/2025/02/e15d8a0a1de821faab5355e610b581016975b974_2_690x265.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="image" src="https://webp.050612.xyz/2025/02/42f87595d27a6fb3ed1fe329934517f5416920c6_2_690x210.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;区域资源&lt;/code&gt; 里选择需要签发的域名，多个域名选择多个。不建议选择全部的域名，**最小权限原则。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;客户端 IP 地址筛选&lt;/code&gt; 里建议写下 acme.sh 所在的主机做为白名单，需要注意，如果服务器有 ipv6 地址，则也需要添加，因为有可能会 ipv6 优先访问。&lt;/p&gt;
&lt;p&gt;击 &lt;code&gt;继续以显示摘要&lt;/code&gt; , 确认没问题后最后点击 &lt;code&gt;创建令牌&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="image" src="https://webp.050612.xyz/2025/02/e88966d6049c27c31c632f9471ec1b79be287b59_2_510x499.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;此时就会出现一个 Token,，即 CF_Token，拷贝备用。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="image" src="https://webp.050612.xyz/2025/02/ca6093ea6bf83325809ea6179d4239ae2c9818cc_2_690x404.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h5 class="heading" id="注意"&gt;
 注意
 &lt;a class="anchor" href="#%e6%b3%a8%e6%84%8f"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意新增域名时，需要更改API Token所包含的域名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意有多台机器时，需要新增机器的IP到白名单&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="update_cf_api_token" src="https://webp.050612.xyz/2025/02/update_cf_api_token.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;













&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="cf-api-token-ip" src="https://webp.050612.xyz/2025/02/cf-api-token-ip.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 class="heading" id="一个完整的演示"&gt;
 一个完整的演示
 &lt;a class="anchor" href="#%e4%b8%80%e4%b8%aa%e5%ae%8c%e6%95%b4%e7%9a%84%e6%bc%94%e7%a4%ba"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;获取到了以上两个token即可开始操作。&lt;/p&gt;
&lt;p&gt;为了使整个流程更加清晰（&lt;del&gt;方便自己操作&lt;/del&gt;），这里贴一个自己平时使用 acme.sh 申请证书的完整流程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申请方式：DNS 认证（使用 Cloudflare API）&lt;/li&gt;
&lt;li&gt;申请证书 CA：Let’s Encrypt&lt;/li&gt;
&lt;li&gt;申请证书类型：RSA + ECC 两个通配符证书&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后续申请证书的命令，都是在 root 用户下执行的，请先使用 &lt;code&gt;su&lt;/code&gt; 切换到 root 用户。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 进入root用户&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;su
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 安装 acme.sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://get.acme.sh | sh
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 刷新 shell 变量配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 导入 Cloudflare API Token&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;export&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;CF_Token&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;export&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;CF_Account_ID&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 设置默认 CA 为 Let&amp;#39;s Encrypt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --set-default-ca --server letsencrypt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 签发 RSA 证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --issue --dns dns_cf -d xxx.xyz -d *.xxx.xyz --keylength 2048
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 安装 RSA 证书到指定路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --install-cert -d domain.tld &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--key-file /path/to/ssl/domain.tld_private.key &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--fullchain-file /path/to/ssl/domain.tld_chain.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--reloadcmd &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;service nginx reload&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 签发 ECC 证书，若不需要，跳过即可&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --issue --dns dns_cf -d domain.tld -d *.domain.tld --keylength ec-256
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 安装 ECC 证书到指定路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --install-cert -d domain.tld --ecc &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--key-file /path/to/ssl/ecc_domain.tld_private.key &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--fullchain-file /path/to/ssl/ecc_domain.tld_chain.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--capath /path/to/ssl/ecc_domain.tld_ca.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--reloadcmd &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;service nginx reload&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 至此证书安装完毕&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 下面是同一台主机申请第二个域名证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;###############################第二个域名#####################################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 签发 RSA 证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --issue --dns dns_cf -d xxx.xyz -d *.xxx.xyz --keylength 2048
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 安装 RSA 证书到指定路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --config-home /root/.acme2 &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--install-cert -d domain.tld &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--key-file /path/to/ssl/domain.tld_private.key &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--fullchain-file /path/to/ssl/domain.tld_chain.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--reloadcmd &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;service nginx reload&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 签发 ECC 证书，若不需要，跳过即可&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --config-home /root/.acme2 --issue --dns dns_cf -d domain.tld -d *.domain.tld --keylength ec-256
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 安装 ECC 证书到指定路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --config-home /root/.acme2 &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--install-cert -d domain.tld --ecc &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--key-file /path/to/ssl/ecc_domain.tld_private.key &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--fullchain-file /path/to/ssl/ecc_domain.tld_chain.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--capath /path/to/ssl/ecc_domain.tld_ca.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--reloadcmd &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;service nginx reload&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查cron定时任务是否已经成功创建&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;crontab -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果有两个以上的域名或者新增域名，
只需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Cloudflare的「API Token」管理中，新增API Token所包含的域名&lt;/li&gt;
&lt;li&gt;签发新域名的证书并安装到指定位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;acme.sh会检查所管理的所有域名的证书的到期时间，如果需要续签，则会执行续签操作并安装导致订位置，实现证书的自动续签。一劳永逸的操作。&lt;/p&gt;
&lt;h2 class="heading" id="迁移服务"&gt;
 迁移服务
 &lt;a class="anchor" href="#%e8%bf%81%e7%a7%bb%e6%9c%8d%e5%8a%a1"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;到了最复杂的一个环节了，即使运行在docker的服务，每个也要迁移volumes、nginx配置，开干！💪正好凑这个机会统计一下我运行了哪些服务。&lt;/p&gt;
&lt;h3 class="heading" id="openwebui--newapi"&gt;
 OpenWebUI + NewAPI
 &lt;a class="anchor" href="#openwebui--newapi"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打包持久化数据，其中NewAPI的MySQL使用了Docker的命名卷&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;######## 打包OpenWebUI和NewAPI的持久化数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar -czvf data.tar.gz ./openwebui ./newapi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;######## 打包newapi MySQL数据卷 ###########&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 查找卷的物理路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker volume inspect [项目名]_mysql_data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 在输出中找到 &amp;#34;Mountpoint&amp;#34;: &amp;#34;/var/lib/docker/volumes/[项目名]_mysql_data/_data&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo tar -czvf ~/mysql_volume.tar.gz /var/lib/docker/volumes/[项目名]_mysql_data/_data
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;使用SFTP功能传输到新机器&lt;/li&gt;
&lt;li&gt;在新机器上解压&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-BASH" data-lang="BASH"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;######## 解压OpenWebUI和NewAPI的持久化数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo tar -xzvf data.tar.gz -C ./
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;######## 解压newapi MySQL数据卷 ###########&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 手动创建目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mkdir -p /var/lib/docker/volumes/[项目名]_mysql_data/_data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 解压文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo tar -xzvf ~/mysql_volume.tar.gz -C /var/lib/docker/volumes/[项目名]_mysql_data/_data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 修复文件权限&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo chown -R 999:999 /var/lib/docker/volumes/[项目名]_mysql_data/_data
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="4"&gt;
&lt;li&gt;配置nginx&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;直接把旧机器上的nginx打包上传到新机上，操作只需要建立site-available与site-enable的软连接&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ln -s /etc/nginx/sites-available/api.vtofun.me /etc/nginx/sites-enabled/api.vtofun.me
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;绷不住了，第一次搬家十分乃至万分不顺利，从七点搬到十一点半还没搬完。搬家太累了😭&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 class="heading" id="openlist"&gt;
 OpenList
 &lt;a class="anchor" href="#openlist"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;想到前段时间的alist的暴雷商业化，我还是把镜像换成OpenList吧。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;docker镜像变更&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;version: &lt;span style="color:#666;font-style:italic"&gt;&amp;#39;3.3&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;services:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; alist:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image: &lt;span style="color:#666;font-style:italic"&gt;&amp;#39;openlistteam/openlist:latest&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; container_name: alist
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-style:italic"&gt;&amp;#39;./data:/opt/alist/data&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ports:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-style:italic"&gt;&amp;#39;127.0.0.1:1259:5244&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - PUID=0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - PGID=0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - UMASK=022
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; restart: unless-stopped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;配置nginx&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ln -s /etc/nginx/sites-available/api.vtofun.me /etc/nginx/sites-enabled/api.vtofun.me
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;注意打开admin用户的webdav的读权限。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class="heading" id="sub-store"&gt;
 sub-store
 &lt;a class="anchor" href="#sub-store"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;很好用的代理配置管理软件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ln -s /etc/nginx/sites-available/substore /etc/nginx/sites-enabled/substore
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl restart nginx.service 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class="heading" id="gemini-balance"&gt;
 Gemini-balance
 &lt;a class="anchor" href="#gemini-balance"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;一个很好用的gemini代理服务，支持多KEY，失败重试等。&lt;/p&gt;
&lt;p&gt;由于之前服务器为香港，而AI服务一般都不支持中国大陆以及香港，所以之前gemini-balance服务部署在一个小机器上。正好趁着这次搬家搬到一起。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose.yml文件，通过.env使用和New-API同一个MySQL，避免起两个MySQL服务，造成资源浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# Gemini代理池&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; gemini-balance:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image: ghcr.io/snailyp/gemini-balance:latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; container_name: gemini-balance
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; restart: unless-stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ports:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;127.0.0.1:1260:8000&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; env_file:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - .env &lt;span style="color:#888;font-style:italic"&gt;# 同样使用 .env 文件管理配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; networks:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - app_network &lt;span style="color:#888;font-style:italic"&gt;# 加入统一网络&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; depends_on:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mysql:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; condition: service_healthy &lt;span style="color:#888;font-style:italic"&gt;# 依赖于我们统一的 mysql 服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; healthcheck:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; test: [&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;CMD-SHELL&amp;#34;&lt;/span&gt;, &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;python -c \&amp;#34;import requests; exit(0) if requests.get(&amp;#39;http://localhost:8000/health&amp;#39;).status_code == 200 else exit(1)\&amp;#34;&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; interval: 30s
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; timeout: 5s
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; retries: 3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; start_period: 10s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;nginx配置文件没有什么特殊的，反代一下即可。&lt;/p&gt;
&lt;h3 class="heading" id="pdfmathtranslate"&gt;
 PDFMathTranslate
 &lt;a class="anchor" href="#pdfmathtranslate"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;一个基于 AI 完整保留排版的 PDF 文档全文双语翻译，支持 Google/DeepL/Ollama/OpenAI 等服务。&lt;/p&gt;
&lt;h2 class="heading" id="安装新服务"&gt;
 安装新服务
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85%e6%96%b0%e6%9c%8d%e5%8a%a1"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 class="heading" id="1panel"&gt;
 1Panel
 &lt;a class="anchor" href="#1panel"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;一键安装的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bash -c &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;&lt;/span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;$(&lt;/span&gt;curl -sSL https://resource.fit2cloud.com/1panel/package/v2/quick_start.sh&lt;span style="font-weight:bold;text-decoration:underline"&gt;)&lt;/span&gt;&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250718151202885.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2025-07-18日更新
1panel 面板bug好多，使用nginx反代面板本身实现https访问，一直卡在loading。不知是不是我操作有问题。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;似乎遇见问题的情况有很多。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250718161106071.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 class="heading" id="问题定位"&gt;
 问题定位
 &lt;a class="anchor" href="#%e9%97%ae%e9%a2%98%e5%ae%9a%e4%bd%8d"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;目前使用ip:port方式可以正常访问，使用域名无法访问，可以初步判断为nginx反代的配置问题。&lt;/p&gt;
&lt;h4 class="heading" id="问题解决"&gt;
 问题解决
 &lt;a class="anchor" href="#%e9%97%ae%e9%a2%98%e8%a7%a3%e5%86%b3"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;贴上一份可以正常工作的nginx配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;listen&lt;/span&gt; 80;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;server_name&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;xxx&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;return&lt;/span&gt; 301 &lt;span style="color:#666;font-style:italic"&gt;https://&lt;/span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$server_name$request_uri&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;listen&lt;/span&gt; 443 &lt;span style="color:#666;font-style:italic"&gt;ssl&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;http2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;server_name&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;xxx&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_certificate&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/etc/ssl/certs/xxx&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_certificate_key&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/etc/ssl/private/xxx&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_session_timeout&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;1d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_session_cache&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;shared:MozSSL:10m&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_ciphers&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;off&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_protocols&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;TLSv1.1&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;TLSv1.2&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;TLSv1.3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;add_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Strict-Transport-Security&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;max-age=63072000&amp;#34;&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;always&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;client_max_body_size&lt;/span&gt; 500m;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;location&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_pass&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;http://xxxx:1255&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# xxx替换为内部访问地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_http_version&lt;/span&gt; 1&lt;span style="color:#666;font-style:italic"&gt;.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# WebSocket 代理所需的头，1Panel 可能用到
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Upgrade&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$http_upgrade&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Connection&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;upgrade&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 重要的转发头
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Host&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$host&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# 传递原始请求的 Host 头
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Real-IP&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$remote_addr&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# 传递真实客户端IP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Forwarded-For&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# 传递完整的IP链
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# *** 传递原始请求协议，解决混合内容问题 ***
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$scheme&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 推荐：如果遇到大文件上传或下载问题，可以尝试关闭 buffering
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# proxy_buffering off;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# proxy_request_buffering off;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class="heading" id="后记"&gt;
 后记
 &lt;a class="anchor" href="#%e5%90%8e%e8%ae%b0"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;在安装1panel之前没有使用过其他运维面板，也不是专业的运维人员，不过有一个GUI总归是好事。可是装上了之后，发现能用上的功能寥寥无几。&lt;/p&gt;
&lt;p&gt;来看看1panel官网介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1Panel 作为一款现代化、开源的 Linux 服务器运维管理面板，其功能涵盖了服务器管理的方方面面，并特别强调了易用性和对新技术的支持。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h5 class="heading" id="核心服务器管理-高效管理"&gt;
 核心服务器管理 (高效管理)
 &lt;a class="anchor" href="#%e6%a0%b8%e5%bf%83%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%ae%a1%e7%90%86-%e9%ab%98%e6%95%88%e7%ae%a1%e7%90%86"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;这个还是很有用的，可以直观看到服务器的资源使用情况。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主机监控&lt;/strong&gt;: 实时监控服务器的 CPU、内存、磁盘 I/O、网络等各项性能指标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件管理&lt;/strong&gt;: 提供在线文件管理器，方便用户上传、下载、编辑、删除服务器上的文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库管理&lt;/strong&gt;: 可视化管理 MySQL、PostgreSQL、MongoDB 等多种数据库，包括创建、删除数据库、用户管理等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器管理&lt;/strong&gt;: 统一管理 Docker 容器，包括容器的启动、停止、重启、删除、日志查看等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 class="heading" id="网站与域名管理-快速建站"&gt;
 网站与域名管理 (快速建站)
 &lt;a class="anchor" href="#%e7%bd%91%e7%ab%99%e4%b8%8e%e5%9f%9f%e5%90%8d%e7%ae%a1%e7%90%86-%e5%bf%ab%e9%80%9f%e5%bb%ba%e7%ab%99"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;对我来说无用，目前docker的基本操作已经够简单了，Nginx配置写起来也不困难。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一键建站部署&lt;/strong&gt;: 深度集成 WordPress、Halo 等开源建站软件，支持一键快速部署。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;域名管理与配置&lt;/strong&gt;: 方便地进行域名绑定、解析设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL 证书管理&lt;/strong&gt;: 支持自动申请和配置 Let&amp;rsquo;s Encrypt 等 SSL 证书，实现 HTTPS 安全访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多站点管理&lt;/strong&gt;: 支持在同一服务器上管理多个网站。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 class="heading" id="应用生态与商店"&gt;
 应用生态与商店
 &lt;a class="anchor" href="#%e5%ba%94%e7%94%a8%e7%94%9f%e6%80%81%e4%b8%8e%e5%95%86%e5%ba%97"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;同上，安装应用也不困难。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;精选开源应用&lt;/strong&gt;: 提供一个丰富的应用商店，涵盖各类高质量的开源工具和应用软件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一键安装部署&lt;/strong&gt;: 用户可以轻松通过点击安装和部署这些应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动更新管理&lt;/strong&gt;: 支持已安装应用的自动更新。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据备份与恢复&lt;/strong&gt;: 提供应用数据的一键备份和恢复功能。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用商店中包含的常见应用类别示例&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web 服务器&lt;/strong&gt;: OpenResty, Nginx Proxy Manager, OpenLiteSpeed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;: MySQL, Redis, PostgreSQL, MariaDB, MongoDB, Elasticsearch, Prometheus, Microsoft SQL Server&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DevOps 工具&lt;/strong&gt;: Gitea, Jenkins, 禅道, Docker Registry, ShowDoc, Nexus Repository&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发工具&lt;/strong&gt;: phpMyAdmin, code-server (浏览器中的 VS Code), IT-Tools, Adminer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建站系统&lt;/strong&gt;: Halo, WordPress, Typecho, Flarum, Wiki.js&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI / 大模型&lt;/strong&gt;: MaxKB (智能体平台), Ollama (本地大模型运行), OpenWebUI, ChatGPT-Next-Web, LobeChat&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行环境&lt;/strong&gt;: PHP (5/7/8), Node.js, &lt;strong&gt;Java&lt;/strong&gt;, Python, Go, .NET&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中间件&lt;/strong&gt;: MinIO (对象存储), RabbitMQ (消息队列), Nacos (服务发现), Kafka, Apache Tomcat, RocketMQ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全工具&lt;/strong&gt;: JumpServer (堡垒机), AdGuardHome (DNS 广告拦截), uuWAF (Web 应用防火墙), OpenVPN&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云存储&lt;/strong&gt;: AList (多存储文件列表), Nextcloud, Cloudreve&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多媒体&lt;/strong&gt;: Jellyfin (媒体服务器), YesPlayMusic (网易云播放器), Navidrome (音乐服务器)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;休闲游戏&lt;/strong&gt;: 中文 DOS 游戏, Minecraft 服务器管理 (MCSManager), 幻兽帕鲁服务端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;邮件服务&lt;/strong&gt;: Mailserver, Roundcube (Web 邮件客户端)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BI (商业智能)&lt;/strong&gt;: DataEase, Metabase (数据可视化分析工具)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其余的一些功能中，能吸引我的还有自动备份功能，未来可能会用到。&lt;/p&gt;
&lt;p&gt;说实话，无法使用nginx反代实现https访问差点把我劝退，1panel的卸载命令都已经敲在了终端中。不过还是更新了一下nginx配置，找到了问题所在，留下来了这个看起来很舒服的面板。希望以后可以发挥更大的作用。&lt;/p&gt;
&lt;h3 class="heading" id="哪吒监控v1"&gt;
 哪吒监控V1
 &lt;a class="anchor" href="#%e5%93%aa%e5%90%92%e7%9b%91%e6%8e%a7v1"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h4 class="heading" id="安装前准备"&gt;
 安装前准备
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85%e5%89%8d%e5%87%86%e5%a4%87"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;h5 class="heading" id="域名"&gt;
 域名
 &lt;a class="anchor" href="#%e5%9f%9f%e5%90%8d"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;一个托管在「Cloudflare」的域名。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;解析到一个至少1c512MB的服务器上作为面板端（后端、监控端）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启「websocket」和「gRPC」












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250720201537824.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 class="heading" id="安装哪吒面板端"&gt;
 安装哪吒面板端
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85%e5%93%aa%e5%90%92%e9%9d%a2%e6%9d%bf%e7%ab%af"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;官方手册：&lt;a href="https://nezha.wiki/guide/dashboard.html"&gt;安装 Dashboard | 哪吒服务器监控&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -L https://raw.githubusercontent.com/nezhahq/scripts/refs/heads/main/install.sh -o nezha.sh &amp;amp;&amp;amp; chmod +x nezha.sh &amp;amp;&amp;amp; sudo ./nezha.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装流程：仅需要特别注意nezha-agent地址填入&lt;code&gt;解析域名:443&lt;/code&gt;












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250720201932192.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 class="heading" id="配置nginx反向代理"&gt;
 配置nginx反向代理
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%aenginx%e5%8f%8d%e5%90%91%e4%bb%a3%e7%90%86"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;一个推荐的nginx配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# ===================================================================
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 哪吒监控 - 后端服务连接池配置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 定义一个名为 &amp;#34;dashboard&amp;#34; 的后端服务池，用于连接复用，提高性能。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# ===================================================================
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;upstream&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;dashboard&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;server&lt;/span&gt; 127.0.0.1:8008;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;keepalive&lt;/span&gt; 512;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# ===================================================================
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# HTTP (80) 到 HTTPS (443) 的永久重定向
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 这是最佳安全实践，确保所有用户都通过加密连接访问。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# ===================================================================
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;listen&lt;/span&gt; 80;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;listen&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;[::]:80&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# &amp;lt;--- 修改这里: 将 dashboard.example.com 替换为你的真实域名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;server_name&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;dashboard.example.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 将所有到来的 HTTP 请求通过 301 永久重定向到对应的 HTTPS 地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;return&lt;/span&gt; 301 &lt;span style="color:#666;font-style:italic"&gt;https://&lt;/span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$host$request_uri&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# ===================================================================
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# HTTPS (443) 主服务配置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 所有加密流量的入口，处理 Web、WebSocket 和 gRPC 请求。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# ===================================================================
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;listen&lt;/span&gt; 443 &lt;span style="color:#666;font-style:italic"&gt;ssl&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;http2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;listen&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;[::]:443&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;ssl&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;http2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# &amp;lt;--- 修改这里: 将 dashboard.example.com 替换为你的真实域名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;server_name&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;dashboard.example.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- SSL 证书配置 ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# &amp;lt;--- 修改这里: 替换为你的 SSL 证书和私钥的实际路径
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_certificate&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/etc/letsencrypt/live/dashboard.example.com/fullchain.pem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_certificate_key&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/etc/letsencrypt/live/dashboard.example.com/key.pem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- SSL 性能与安全优化 (通常无需修改) ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_stapling&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;on&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_session_timeout&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;1d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_session_cache&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;shared:SSL:10m&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;ssl_protocols&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;TLSv1.2&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;TLSv1.3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 允许 Header 中包含下划线，兼容某些特殊情况
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;underscores_in_headers&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;on&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- 获取真实访客 IP (Cloudflare CDN 专用配置) ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 因为你使用了 Cloudflare，所以保留这两行配置。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 它告诉 Nginx 要信任所有 IP 发来的请求头，并从 CF-Connecting-IP 头中获取真实 IP。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 更安全的做法是仅信任来自 Cloudflare 官方 IP 段的请求，但当前配置对于绝大多数场景是足够且方便的。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;set_real_ip_from&lt;/span&gt; 0.0.0.0&lt;span style="color:#666;font-style:italic"&gt;/0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;real_ip_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;CF-Connecting-IP&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- gRPC 请求处理 (Agent 核心数据上报) ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;location&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;^~&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/proto.NezhaService/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;grpc_pass&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;grpc://dashboard&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# 将 gRPC 请求转发给后端服务池
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 将真实访客 IP 传递给后端 (使用 Cloudflare 提供的 Header)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;grpc_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;nz-realip&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$http_CF_Connecting_IP&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 其他 gRPC 相关优化 (通常无需修改)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;grpc_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Host&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$host&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;grpc_read_timeout&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;600s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;grpc_send_timeout&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;600s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;grpc_socket_keepalive&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;on&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;client_max_body_size&lt;/span&gt; 10m;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;grpc_buffer_size&lt;/span&gt; 4m;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- WebSocket 请求处理 (网页终端、文件管理等实时功能) ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;location&lt;/span&gt; ~&lt;span style="color:#666;font-style:italic"&gt;*&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;^/api/v1/ws/(server|terminal|file)(.*)&lt;/span&gt;$ {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_pass&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;http://127.0.0.1:8008&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# 直接转发给后端的 8008 端口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- WebSocket 代理关键配置 ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_http_version&lt;/span&gt; 1&lt;span style="color:#666;font-style:italic"&gt;.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Upgrade&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$http_upgrade&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Connection&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;upgrade&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 将真实访客 IP 传递给后端 (使用 Cloudflare 提供的 Header)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;nz-realip&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$http_CF_Connecting_IP&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 其他 Header 和超时配置 (通常无需修改)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Host&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$host&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Origin&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;https://&lt;/span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$host&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_read_timeout&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;3600s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_send_timeout&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;3600s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# --- Web 页面请求处理 (兜底规则) ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;location&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_pass&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;http://127.0.0.1:8008&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# 转发给后端的 8008 端口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 将真实访客 IP 传递给后端 (使用 Cloudflare 提供的 Header)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;nz-realip&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$http_CF_Connecting_IP&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 其他 Header 和超时配置 (通常无需修改)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Host&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$host&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_read_timeout&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;3600s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_send_timeout&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;3600s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_buffer_size&lt;/span&gt; 128k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_buffers&lt;/span&gt; 4 256k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_busy_buffers_size&lt;/span&gt; 256k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_max_temp_file_size&lt;/span&gt; 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class="heading" id="哪吒面板设置"&gt;
 哪吒面板设置
 &lt;a class="anchor" href="#%e5%93%aa%e5%90%92%e9%9d%a2%e6%9d%bf%e8%ae%be%e7%bd%ae"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;到了这一步，此时就可以通过域名访问面板了，并且并没有暴露多余的端口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首次登录用户与密码均为&lt;code&gt;admin&lt;/code&gt;,第一步先改个默认密码再说。&lt;/li&gt;
&lt;li&gt;因为面板和 agent 都开启了 CF CDN，我们需要在面板系统设置里面的真实 IP 请求头填写&lt;code&gt;CF-Connecting-IP&lt;/code&gt;，后台的登录 IP 以及其它地方才能正常显示真实 IP。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250720202751842.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 class="heading" id="面板开启oauth2"&gt;
 面板开启OAuth2
 &lt;a class="anchor" href="#%e9%9d%a2%e6%9d%bf%e5%bc%80%e5%90%afoauth2"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;官方说明：&lt;a href="https://nezha.wiki/guide/q14.html#%E8%AE%BE%E7%BD%AE-oauth-2-0-%E7%BB%91%E5%AE%9A"&gt;设置 OAuth 2.0 绑定 | 哪吒服务器监控&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我选择使用「github」&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;a href="https://github.com/settings/developers"&gt;GitHub开发者设置&lt;/a&gt;，依次选择 “OAuth Apps” - “New OAuth App”。&lt;/li&gt;
&lt;li&gt;填写以下需要的字段：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Application name&lt;/code&gt;：应用名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Homepage URL&lt;/code&gt;：面板访问地址，例如 &lt;code&gt;https://nezha.example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Authorization callback URL&lt;/code&gt; 面板的 Callback 地址，这里只检测前缀，所以可以填写 &lt;code&gt;https://nezha.example.com/api/v1/oauth2/callback&lt;/code&gt;。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250720203459271.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;在新页面中记录 Client ID 和 Client secrets，完成面板 OAuth 2.0 配置：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;oauth2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; GitHub:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; client_id: &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;a-unique-id&amp;#34;&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 替换你的 Client ID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; client_secret: &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;a-unique-secret&amp;#34;&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 替换你的 Client secrets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; endpoint:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; auth_url: &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;https://github.com/login/oauth/authorize&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; token_url: &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;https://github.com/login/oauth/access_token&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; user_info_url: &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;https://api.github.com/user&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; user_id_path: &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;id&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="4"&gt;
&lt;li&gt;将以上配置添加到&lt;code&gt;/opt/nezha/dashboard/data/config.yaml&lt;/code&gt;面板（Dashboard） 配置&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo vim /opt/nezha/dashboard/data/config.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="5"&gt;
&lt;li&gt;重启面板使新配置生效&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;./nezha.sh 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="6"&gt;
&lt;li&gt;打开个人信息设置绑定github，并关闭密码登录












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250720204140554.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 class="heading" id="安装探针agent端监控端"&gt;
 安装探针（agent端、监控端）
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85%e6%8e%a2%e9%92%88agent%e7%ab%af%e7%9b%91%e6%8e%a7%e7%ab%af"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;官方教程：&lt;a href="https://nezha.wiki/guide/agent.html"&gt;安装 Agent | 哪吒服务器监控&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;服务器&lt;/code&gt; 页面中，点击 &lt;code&gt;安装命令&lt;/code&gt; 并选择对应操作系统，安装命令将自动复制到你的剪贴板。&lt;/li&gt;
&lt;li&gt;在被控端服务器中运行安装命令，等待安装完成后返回到 &lt;code&gt;服务器&lt;/code&gt; 页面查看是否上线。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;在面板显示&lt;code&gt;暴力攻击代理秘密&lt;/code&gt; 与 &lt;code&gt;gRPC 认证失败&lt;/code&gt;，但是又能正常监控，还以为发现了bug，但是最后发现是因为我多次安装agent导致出现了一些僵尸进程。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;ps -ef | grep nezha-agent&lt;/code&gt; 查看，并使用 &lt;code&gt;sudo kill&lt;/code&gt; 杀掉僵尸进程就没有了。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250720212944889.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h5 class="heading" id="安全设置-关闭探针远程控制功能"&gt;
 安全设置： 关闭探针远程控制功能
 &lt;a class="anchor" href="#%e5%ae%89%e5%85%a8%e8%ae%be%e7%bd%ae-%e5%85%b3%e9%97%ad%e6%8e%a2%e9%92%88%e8%bf%9c%e7%a8%8b%e6%8e%a7%e5%88%b6%e5%8a%9f%e8%83%bd"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;打开&lt;code&gt;/opt/nezha/agent/config.yml&lt;/code&gt;，把 &lt;code&gt;disable_command_execute&lt;/code&gt;改成true&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo vim /opt/nezha/agent/config.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;重启agent服务&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl restart nezha-agent
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 class="heading" id="添加备注"&gt;
 添加备注
 &lt;a class="anchor" href="#%e6%b7%bb%e5%8a%a0%e5%a4%87%e6%b3%a8"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;&lt;a href="https://nezhainfojson.pages.dev"&gt;公开备注生成器&lt;/a&gt;&lt;/p&gt;
&lt;h5 class="heading" id="卸载agent端"&gt;
 卸载agent端
 &lt;a class="anchor" href="#%e5%8d%b8%e8%bd%bdagent%e7%ab%af"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;停止 Agent 服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;sudo systemctl stop nezha-agent&lt;/code&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;禁用开机自启&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;防止服务在系统启动时自动运行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo systemctl disable nezha-agent&lt;/code&gt;&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;删除服务文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;移除 &lt;code&gt;nezha-agent&lt;/code&gt; 的服务配置文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rm /etc/systemd/system/nezha-agent.service&lt;/code&gt;&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;删除 Agent 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;删除安装目录中的 Agent 文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rm -rf /opt/nezha/agent&lt;/code&gt;&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;重新加载 systemd 配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;确保系统服务管理器加载最新的配置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo systemctl daemon-reload&lt;/code&gt;&lt;/p&gt;
&lt;ol start="6"&gt;
&lt;li&gt;检查残留进程
确认没有遗留的 &lt;code&gt;nezha-agent&lt;/code&gt; 进程在运行。如果发现仍有相关进程运行，请使用 &lt;code&gt;sudo kill&lt;/code&gt; 命令终止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;ps -ef | grep nezha-agent&lt;/code&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;删除日志文件（可选）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果需要，您可以删除与 &lt;code&gt;nezha-agent&lt;/code&gt; 相关的日志文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rm -rf /var/log/nezha&lt;/code&gt;&lt;/p&gt;
&lt;h2 class="heading" id="关闭-ipv6--开启bbr"&gt;
 关闭 ipv6 &amp;amp; 开启bbr
 &lt;a class="anchor" href="#%e5%85%b3%e9%97%ad-ipv6--%e5%bc%80%e5%90%afbbr"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;我的网络环境为校园网，对ipv6的支持并不好；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;net.core.default_qdisc=fq&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;net.ipv4.tcp_congestion_control=bbr&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sysctl -p
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;lsmod | grep bbr &lt;span style="color:#888;font-style:italic"&gt;# 查看是否成功开启BBR&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 1. 将配置添加到 /etc/sysctl.conf (使用 tee -a 确保安全追加)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;net.ipv6.conf.all.disable_ipv6 = 1&amp;#34;&lt;/span&gt; | sudo tee -a /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;net.ipv6.conf.default.disable_ipv6 = 1&amp;#34;&lt;/span&gt; | sudo tee -a /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;net.ipv6.conf.lo.disable_ipv6 = 1&amp;#34;&lt;/span&gt; | sudo tee -a /etc/sysctl.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 2. 使配置立即生效 (并加载所有 /etc/sysctl.conf 中的配置)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo sysctl -p
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 3. (可选) 重启系统以确保所有服务都以新配置启动&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# sudo reboot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>自建Vaultwarden密码库：从部署到安全备份</title><link>https://blog.yzyy.de/explore/self-host/vaultwarden%E8%87%AA%E5%BB%BA%E5%AF%86%E7%A0%81%E5%BA%93/</link><pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/explore/self-host/vaultwarden%E8%87%AA%E5%BB%BA%E5%AF%86%E7%A0%81%E5%BA%93/</guid><description>&lt;h1 class="heading" id="缘起"&gt;
 缘起
 &lt;a class="anchor" href="#%e7%bc%98%e8%b5%b7"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;在安全意识没有升高的时候，甚至想过记住一个可以应付各种网站要求的密码，一个包括特殊符号(如!.*&amp;amp;)、大小写字母、数字等集于一身的密码。这样我就可以所有账号可以使用一个通用的密码了😁。&lt;/p&gt;
&lt;p&gt;后来不止一次感受到危机，各种账号好多使用了同一个密码，密码如果泄露，直接一锅端了。并且遇到过登录账号需要打开ios的记事本和密码app手动搜索和查找的尴尬时刻&amp;hellip;&lt;/p&gt;
&lt;p&gt;早已听过bitwarden的大名，这个软件可以满足我的所有需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全平台：ios、web扩展、windows等等，可以在一端储存，多端访问。&lt;/li&gt;
&lt;li&gt;数据安全：采用最先进的加密技术。确保密码和敏感信息在安全传输并存储在服务器上进行本地加密。&lt;/li&gt;
&lt;li&gt;免费：最大的优点&lt;/li&gt;
&lt;li&gt;生成强密码：集成生成强密码的工具&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于Bitwarden官方部署机器最小的要求是2g，故选择社区版VaultWarden，可以私有部署，但比官方更轻量，使用 Rust 编写，改用 SQLite 数据库（现在也支持 MySQL 和 PostgreSQL），运行时只需要 10M 内存，可以说对硬件基本没有要求。&lt;/p&gt;
&lt;p&gt;等有一天有了高性能机器可以尝试使用官方实例，参考教程&lt;a href="https://linux.do/t/topic/261426"&gt;自建BitWarden&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 class="heading" id="搭建vaultwarden"&gt;
 搭建VaultWarden
 &lt;a class="anchor" href="#%e6%90%ad%e5%bb%bavaultwarden"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;搭建部分参考&lt;a href="https://linux.do/t/topic/261426"&gt;自建BitWarden-强大的跨平台密码管理系统#方案二：社区自建&lt;/a&gt;，感谢。&lt;/p&gt;
&lt;h3 class="heading" id="安装docker和docker-compose"&gt;
 安装docker和docker compose
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85docker%e5%92%8cdocker-compose"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;参考本篇博客&lt;a href="https://blog.yzyy.de/explore/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/#安装docker和dockercompose"&gt;服务器配置流程记录#安装 Docker&lt;/a&gt;&lt;/p&gt;
&lt;h3 class="heading" id="部署vaultwarden"&gt;
 部署VaultWarden
 &lt;a class="anchor" href="#%e9%83%a8%e7%bd%b2vaultwarden"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Vaultwarden 官方仓库：&lt;a href="https://github.com/dani-garcia/vaultwarden"&gt;Vaultwarden&lt;/a&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建数据存储路径（包含数据库和配置文件）&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p /vaultwarden/data	&lt;span style="color:#888;font-style:italic"&gt;# 创建数据目录，这里可以自行设置，之后的配置文件和数据库都会在这里。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;创建 docker-compose.yml
使用 docker compose 方式安装 vaultwarden&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;cd&lt;/span&gt; vaultwarden	&lt;span style="color:#888;font-style:italic"&gt;# 进入你准备安装vaultwarden的目录，可自行修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vim docker-compose.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下是我经过调试的配置，开启了管理员页面和移动设备通知。修改下面的配置文件后粘贴到 docker-compose.yml 文件中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;services:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vaultwarden:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image: vaultwarden/server:latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; container_name: vaultwarden &lt;span style="color:#888;font-style:italic"&gt;# 容器名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; restart: unless-stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ports:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;80:80&amp;#34;&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;#修改想要映射的端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - ./data:/data &lt;span style="color:#888;font-style:italic"&gt;# 配置数据存储路径。将./data修改为在第一步设置的数据存储路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;ADMIN_TOKEN&lt;/span&gt;=admin_tokens &lt;span style="color:#888;font-style:italic"&gt;# 管理员密钥，建议生成四十位以上&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;#移动设备推送设置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PUSH_ENABLED&lt;/span&gt;=&lt;span style="font-weight:bold;font-style:italic"&gt;true&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 这里的意思是打开推送功能（不开启的话移动设备无法接收通知）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PUSH_INSTALLATION_ID&lt;/span&gt;=id &lt;span style="color:#888;font-style:italic"&gt;# 填入获取到的移动设备的推动通知的id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PUSH_INSTALLATION_KEY&lt;/span&gt;=key &lt;span style="color:#888;font-style:italic"&gt;# 填入key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;SIGNUPS_ALLOWED&lt;/span&gt;=&lt;span style="font-weight:bold;font-style:italic"&gt;false&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 禁止新用户注册，可以在管理员页面邀请注册&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;DOMAIN&lt;/span&gt;=https://域名/自定子路径/ &lt;span style="color:#888;font-style:italic"&gt;# 如果想要添加子路径，需要对应修改这里，一定要在nginx进行相应的分流&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# SMTP 设置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;SMTP_HOST&lt;/span&gt;=smtp.qq.com &lt;span style="color:#888;font-style:italic"&gt;# SMTP 服务器地址，QQ 邮箱为 smtp.qq.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;SMTP_FROM&lt;/span&gt;=example@qq.com &lt;span style="color:#888;font-style:italic"&gt;# 发件人邮箱地址，替换为你自己的 QQ 邮箱&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;SMTP_FROM_NAME&lt;/span&gt;=VaultwardenAdmin &lt;span style="color:#888;font-style:italic"&gt;# 发件人名称，可以自定义&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;SMTP_PORT&lt;/span&gt;=465 &lt;span style="color:#888;font-style:italic"&gt;# SMTP 端口，QQ 邮箱使用 SSL 加密，端口为 465&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;SMTP_SECURITY&lt;/span&gt;=force_tls &lt;span style="color:#888;font-style:italic"&gt;# SMTP 加密方式，QQ 邮箱使用 SSL 加密，设置为 force_tls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;SMTP_USERNAME&lt;/span&gt;=example@qq.com &lt;span style="color:#888;font-style:italic"&gt;# SMTP 用户名，通常为你的 QQ 邮箱地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;SMTP_PASSWORD&lt;/span&gt;=secret &lt;span style="color:#888;font-style:italic"&gt;# SMTP 密码，此处填写 QQ 邮箱的 SMTP 授权码，不是邮箱登录密码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;SMTP_TIMEOUT&lt;/span&gt;=15 &lt;span style="color:#888;font-style:italic"&gt;# 设置 SMTP 超时时间为 15 秒&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;SMTP_EMBED_IMAGES&lt;/span&gt;=&lt;span style="font-weight:bold;font-style:italic"&gt;true&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 启用将图片嵌入邮件中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; watchtower:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image: containrrr/watchtower
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; container_name: watchtower
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; restart: unless-stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - /var/run/docker.sock:/var/run/docker.sock
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;TZ&lt;/span&gt;=Asia/Shanghai
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;WATCHTOWER_CLEANUP&lt;/span&gt;=&lt;span style="font-weight:bold;font-style:italic"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;WATCHTOWER_SCHEDULE&lt;/span&gt;=0 0 4 * * * &lt;span style="color:#888;font-style:italic"&gt;# 每天凌晨4点检查并更新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;密码生成网站：&lt;a href="https://1password.com/zh-cn/password-generator"&gt;安全、强大的密码生成器 | 1Password&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;推送通知网站：&lt;a href="https://bitwarden.com/host/"&gt;Requesting Hosting Installation ID &amp;amp; Key | Bitwarden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;STMP服务：&lt;a href="https://app.brevo.com/settings/keys/smtp"&gt;brevo&lt;/a&gt;，最终没成功用上。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;踩的坑&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;开启移动设备通知:
从Vaultwarden 1.29.0版本开始，可以启用移动客户端的推送通知，在移动应用程序、网页扩展程序和网页密码库之间自动同步您的个人密码库，而无需手动同步。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问 &lt;a href="https://bitwarden.com/host/" title="https://bitwarden.com/host/"&gt;https://bitwarden.com/host/&lt;/a&gt;，输入您的电子邮件地址，数据地区选择美国，然后您将获得一个INSTALLATION ID和KEY。&lt;/li&gt;
&lt;li&gt;在你的docker-compose.yaml中添加以下环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PUSH_ENABLED&lt;/span&gt;=&lt;span style="font-weight:bold;font-style:italic"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PUSH_INSTALLATION_ID&lt;/span&gt;=获得的id
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PUSH_INSTALLATION_KEY&lt;/span&gt;=获得的key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果在上一步中请求了 &lt;code&gt;bitwarden.eu（欧盟）&lt;/code&gt;，还必须设置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PUSH_RELAY_URI&lt;/span&gt;=https://push.bitwarden.eu
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PUSH_IDENTITY_URI&lt;/span&gt;=https://identity.bitwarden.eu
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;自定子路径
一定要在nginx进行相应的分流设置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一次启动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker compose up -d &amp;amp;&amp;amp; docker compose logs -f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;docker compose logs -f&lt;/code&gt; 是为了查看日志，如果报错的话可以查一查原因&lt;/p&gt;
&lt;p&gt;如果更新 compose 文件之后的话用下面的命令启动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker compose pull &amp;amp;&amp;amp; docker compose up -d &amp;amp;&amp;amp; docker compose logs -f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class="heading" id="配置nginx"&gt;
 配置nginx
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%aenginx"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;经过调试过后的nginx的配置文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-txt" data-lang="txt"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;server {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; listen 80;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; server_name example.com;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; return 301 https://$host$request_uri;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;server {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; listen 443 ssl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; server_name example.com;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ssl_certificate /etc/ssl/certs/example.com.pem;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ssl_certificate_key /etc/ssl/private/example.com.key;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ssl_protocols TLSv1.2 TLSv1.3; # 根据需要调整
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ssl_ciphers HIGH:!aNULL:!MD5; # 根据需要调整
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; client_max_body_size 525M;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; location /子路径/ {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_pass http://127.0.0.1:1256; # 注意修改端口
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header Host $host;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header X-Real-IP $remote_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header X-Forwarded-Proto $scheme;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; location /子路径/notifications {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_pass http://127.0.0.1:1256; # 注意修改端口
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header Upgrade $http_upgrade;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header Connection &amp;#34;upgrade&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_http_version 1.1;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header Host $host;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header X-Real-IP $remote_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header X-Forwarded-Proto $scheme;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; # 根路径返回 404 错误
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; location / {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; return 404;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;踩的坑&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;子路径相匹配：
&lt;ul&gt;
&lt;li&gt;一定要在docker-compose.yml加入相应的DOMAIN域的环境变量&lt;/li&gt;
&lt;li&gt;admin管理页面可以不用配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新版vaultWarden可以不用手动进行websocket端口映射，在1.29版本之后共用一个80端口&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;自 Vaultwarden v1.29.0 起，WebSocket 默认启用。以前的版本需要反向代理，因为 WebSocket 运行在与默认的 HTTPS 端口不同的端口上。
自 Vaultwarden v1.29.0 版本起，旧的 &lt;code&gt;WEBSOCKET_ENABLED&lt;/code&gt; 和 &lt;code&gt;WEBSOCKET_PORT&lt;/code&gt; 已被弃用并将被忽略。在 v1.29.0 版本之后，您可以通过将 &lt;code&gt;ENABLE_WEBSOCKET&lt;/code&gt; 设置为 &lt;code&gt;false&lt;/code&gt; 值来禁用 Websocket 通知，这将减少 Vaultwarden 使用的资源（尽管不会太多）。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol start="3"&gt;
&lt;li&gt;需要为&lt;code&gt;/子路径/notifications&lt;/code&gt;配置分流，不能仅为&lt;code&gt;/子路径/notifications/hub&lt;/code&gt;配置分流会导致，使用移动设备准许登录不能生效&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class="heading" id="测试-websocket-连接"&gt;
 测试 WebSocket 连接
 &lt;a class="anchor" href="#%e6%b5%8b%e8%af%95-websocket-%e8%bf%9e%e6%8e%a5"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;有两种方式可以测试连接是否正常工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开浏览器的开发人员工具，转到网络选项卡然后筛选 &lt;code&gt;WS&lt;/code&gt;/&lt;code&gt;WebSockets&lt;/code&gt;。注销或刷新页面并再次登录，您应该会看到升级后的 WebSocket 连接的 101 响应。如果您单击该行，您应该能够看到消息。如果您没有在 &lt;code&gt;/notifications/hub&lt;/code&gt; 上获得状态代码 101，则表示某些配置不正确。消息将显示在浏览器的控制台窗口中：&lt;code&gt;[2023-12-01T00:00:00.000Z] Information: WebSocket connected to wss://HOST_NAME/notifications/hub?access_token=eyJ0eX......&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开两个不同的浏览器或隐身/隐私窗口。在两个浏览器上登录您的帐户。创建一个新的条目，或者重命名一个条目，在另一个浏览器中应该会立即收到更改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试移动设备准许登录功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class="heading" id="安全设置"&gt;
 安全设置
 &lt;a class="anchor" href="#%e5%ae%89%e5%85%a8%e8%ae%be%e7%bd%ae"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 class="heading" id="cloudflare操作"&gt;
 cloudflare操作
 &lt;a class="anchor" href="#cloudflare%e6%93%8d%e4%bd%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SSL/TLS&lt;/code&gt; &lt;code&gt;概述&lt;/code&gt; 加密模式：完全（严格）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class="heading" id="vps操作"&gt;
 VPS操作
 &lt;a class="anchor" href="#vps%e6%93%8d%e4%bd%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h4 class="heading" id="设置随机子路径"&gt;
 设置随机子路径
 &lt;a class="anchor" href="#%e8%ae%be%e7%bd%ae%e9%9a%8f%e6%9c%ba%e5%ad%90%e8%b7%af%e5%be%84"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;修改docker-compose.yml文件，environment变量加入DOMAIN域&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- DOMAIN=https://域名/自定子路径/ &lt;span style="color:#888;font-style:italic"&gt;# 如果想要添加子路径，需要对应修改这里，一定要在nginx进行相应的分流&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;设置子路径分流&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nginx" data-lang="nginx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;location&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/子路径/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_pass&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;http://127.0.0.1:1256&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# 注意修改端口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Host&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$host&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Real-IP&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$remote_addr&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Forwarded-For&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$scheme&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;location&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/子路径/notifications&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_pass&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;http://127.0.0.1:1256&lt;/span&gt;; &lt;span style="color:#888;font-style:italic"&gt;# 注意修改端口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Upgrade&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$http_upgrade&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Connection&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;upgrade&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_http_version&lt;/span&gt; 1&lt;span style="color:#666;font-style:italic"&gt;.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;Host&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$host&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Real-IP&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$remote_addr&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Forwarded-For&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;proxy_set_header&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$scheme&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 根路径返回 404 错误
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;location&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;return&lt;/span&gt; 404;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class="heading" id="关闭页面并禁用注册"&gt;
 关闭页面并禁用注册
 &lt;a class="anchor" href="#%e5%85%b3%e9%97%ad%e9%a1%b5%e9%9d%a2%e5%b9%b6%e7%a6%81%e7%94%a8%e6%b3%a8%e5%86%8c"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;查看网页端的密码重复泄露报告，然后关闭网页端&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- SIGNUPS_ALLOWED=false &lt;span style="color:#888;font-style:italic"&gt;#关闭注册&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- WEB_VAULT_ENABLED=false &lt;span style="color:#888;font-style:italic"&gt;#关闭网页端&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class="heading" id="定时检查容器更新"&gt;
 定时检查容器更新
 &lt;a class="anchor" href="#%e5%ae%9a%e6%97%b6%e6%a3%80%e6%9f%a5%e5%ae%b9%e5%99%a8%e6%9b%b4%e6%96%b0"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;2025年2月7日更新：watchtower的cron使用了SPRING语法&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;services:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; watchtower:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image: containrrr/watchtower
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; container_name: watchtower
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; restart: unless-stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - /var/run/docker.sock:/var/run/docker.sock
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - TZ=Asia/Shanghai
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - WATCHTOWER_CLEANUP=true
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - WATCHTOWER_SCHEDULE=0 0 4 * * * &lt;span style="color:#888;font-style:italic"&gt;# 每天凌晨4点检查并更新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class="heading" id="vaultwarden-自动备份配置"&gt;
 vaultwarden 自动备份配置
 &lt;a class="anchor" href="#vaultwarden-%e8%87%aa%e5%8a%a8%e5%a4%87%e4%bb%bd%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;2025年5月16日更新&lt;/p&gt;
&lt;p&gt;以下的自动备份配置为了达到良好的备份效果导致配置起来十分复杂与繁琐，经过长时间来看，我觉得没有必要额外备份。&lt;/p&gt;
&lt;p&gt;之所以这么说的原因时bitwarden客户端的导出功能：我们一般会在多台设备上同时使用，PC、IOS\Android、Web浏览器等，不同客户端都会在本地储存一份数据。这些客户端天生形成了多份备份。&lt;/p&gt;
&lt;p&gt;即使服务器宕机或者数据清空，直接使用客户端的导出功能即可备份。不过可能由于不同服务器间的同步延迟，与服务器数据有些许差异。但是一般更新密码的频率不是很高，所以可以忽略。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;异地定时备份。&lt;/p&gt;
&lt;p&gt;使用项目&lt;a href="https://github.com/ttionya/vaultwarden-backup?tab=readme-ov-file"&gt;GitHub - ttionya/vaultwarden-backup&lt;/a&gt; 用于备份 &lt;a href="https://github.com/dani-garcia/vaultwarden"&gt;vaultwarden&lt;/a&gt; 数据，并通过 &lt;a href="https://rclone.org/"&gt;Rclone&lt;/a&gt; 同步到其他存储系统。&lt;/p&gt;
&lt;h4 class="heading" id="使用步骤"&gt;
 使用步骤
 &lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%ad%a5%e9%aa%a4"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;h5 class="heading" id="配置-rclone"&gt;
 配置 Rclone
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae-rclone"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;重要提示：&lt;/strong&gt; 备份前必须配置 Rclone，否则备份工具无法工作。还原备份则非必须配置 Rclone。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行 Rclone 配置容器：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run --rm -it &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; --mount &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;type&lt;/span&gt;=volume,source=vaultwarden-rclone-data,target=/config/ &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; ttionya/vaultwarden-backup:latest &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; rclone config
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run --rm -it&lt;/code&gt;：运行一个临时的、交互式的 Docker 容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mount type=volume,source=vaultwarden-rclone-data,target=/config/&lt;/code&gt;：将名为 &lt;code&gt;vaultwarden-rclone-data&lt;/code&gt; 的 Docker 卷挂载到容器的 &lt;code&gt;/config&lt;/code&gt; 目录，用于存储 Rclone 的配置文件。如果这个卷不存在，Docker 会自动创建它。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rclone config&lt;/code&gt;：在容器中执行的命令，启动 Rclone 的交互式配置向导。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此命令会启动 Rclone 的交互式配置向导，按照提示配置你的云存储服务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我准备同时备份到 Google Drive、Infini-cloud (WebDAV) 和 OneDrive 这三个网盘，并最终将它们合并到一个 &lt;code&gt;union&lt;/code&gt; 远程中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤：&lt;/strong&gt;
这里十分复杂，但是跟着步骤一步步来不容易出错。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置 Google Drive 远程 （需要挂梯子才能收到回调）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运行 Rclone 配置容器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run --rm -it &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; --mount &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;type&lt;/span&gt;=volume,source=vaultwarden-rclone-data,target=/config/ &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; ttionya/vaultwarden-backup:latest &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; rclone config
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建新远程 (New remote)：输入 n 并回车；命名远程：name&amp;gt; 后面输入 BitwardenBackup-GoogleDrive 并回车；选择存储类型：找到 Google Drive 对应的编号，通常是 20，输入 20 并回车；client_id：直接回车；client_secret：直接回车；选择权限范围 (scope)：输入 1 (选择 Full access all files, excluding Application Data folder.) 并回车；root_folder_id：直接回车；service_account_file：直接回车；编辑高级配置 (Edit advanced config)：输入 n 并回车；自动配置 (Use auto config)：输入 y 并回车；浏览器验证，复制授权码；粘贴授权码到 Enter verification code&amp;gt; 提示符后回车；是否是团队盘 (team drive)：根据需要输入 y 或直接回车；确认配置：输入 y 并回车。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;配置 Infini-cloud (WebDAV) 远程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运行 Rclone 配置容器；创建新远程 (New remote)：输入 n 并回车；命名远程：name&amp;gt; 后面输入 BitwardenBackup-InfiniCloud 并回车；选择存储类型：找到 WebDAV 对应的编号，通常是 56，输入 56 并回车；输入 url：url&amp;gt; 后面输入 Infini-cloud 提供的 WebDAV URL；输入 vendor：vendor&amp;gt; 后面输入 other 并回车；输入 user：user&amp;gt; 后面输入你的 Infini-cloud 用户名；输入 pass：pass&amp;gt; 后面输入 y 并回车，然后输入两次密码；输入 bearer_token：直接回车；编辑高级配置 (Edit advanced config)：输入 n 并回车；确认配置：输入 y 并回车。&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;配置 OneDrive 远程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运行 Rclone 配置容器；创建新远程 (New remote)：输入 n 并回车；命名远程：name&amp;gt; 后面输入 BitwardenBackup-OneDrive 并回车；选择存储类型：找到 Microsoft OneDrive 对应的编号，通常是 36，输入 36 并回车；client_id：直接回车；client_secret：直接回车；选择地区 (region)：选择 global 对应的编号并回车；编辑高级配置 (Edit advanced config)：输入 n 并回车；自动配置 (Use auto config)：输入 y 并回车；浏览器验证，复制授权码；粘贴授权码到 Enter verification code&amp;gt; 提示符后回车；选择驱动器类型 (drive type)：根据你的 OneDrive 类型选择 personal、business 或 document library，输入对应的编号并回车; 选择驱动器 (drive id)：输入 0 并回车; 确认配置：输入 y 并回车。&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;配置 Union 远程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运行 Rclone 配置容器；创建新远程 (New remote)：输入 n 并回车；命名远程：name&amp;gt; 后面输入 BitwardenBackup 并回车；选择存储类型：找到 Union 对应的编号，通常是 54，输入 54 并回车；输入 upstreams：upstreams&amp;gt; 后面输入你之前配置的三个远程的名称，用空格分隔：&lt;/p&gt;
&lt;p&gt;BitwardenBackup-GoogleDrive: BitwardenBackup-InfiniCloud: BitwardenBackup-OneDrive:
输入 action_policy：输入 all 并回车；输入 create_policy：输入 all 并回车；输入 search_policy：输入 all 并回车；确认配置：输入 y 并回车。&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;配置完成后，运行以下命令检查配置是否正确：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; docker run --rm -it &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; --mount &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;type&lt;/span&gt;=volume,source=vaultwarden-rclone-data,target=/config/ &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; ttionya/vaultwarden-backup:latest &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; rclone config show
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 class="heading" id="修改-docker-composeyml-文件"&gt;
 修改 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件
 &lt;a class="anchor" href="#%e4%bf%ae%e6%94%b9-docker-composeyml-%e6%96%87%e4%bb%b6"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;本方案采用每日备份，保留三十天，每月备份一次，保留十二个月的备份方式：开启两个backup服务-daily_backup和monthly_backup&lt;/p&gt;
&lt;p&gt;将 &lt;code&gt;vaultwarden-backup&lt;/code&gt; 服务的 &lt;code&gt;RCLONE_REMOTE_NAME&lt;/code&gt; 环境变量设置为 &lt;code&gt;BitwardenBackup&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;services:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vaultwarden:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image: vaultwarden/server:latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; container_name: vaultwarden 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; restart: unless-stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ports:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;1256:80&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - ./data:/data 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - ADMIN_TOKEN=gwQnrvr6sWcCiw6pYhUYFQVTTEPYWx4UR6uhTB73dsrPXDWEHhxC5Fs
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;#移动设备推送设置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - PUSH_ENABLED=true &lt;span style="color:#888;font-style:italic"&gt;# 这里的意思是打开推送功能（不开启的话移动设备无法接收通知）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - PUSH_INSTALLATION_ID=eb1d824c-941d-4109-bb8d-b26a00cd0ba3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - PUSH_INSTALLATION_KEY=u1r438BxudgiOaURxOss &lt;span style="color:#888;font-style:italic"&gt;# 填入key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SIGNUPS_ALLOWED=false &lt;span style="color:#888;font-style:italic"&gt;# 禁止新用户注册，可以在管理员页面邀请注 册&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - DOMAIN=https://vtolove.me/psJm18PFVg8EkBnTA5Fi/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# SMTP 设置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SMTP_HOST=smtp.qq.com &lt;span style="color:#888;font-style:italic"&gt;# SMTP 服务器地址，QQ 邮箱为 smtp.qq.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SMTP_FROM=849815996@qq.com &lt;span style="color:#888;font-style:italic"&gt;# 发件人邮箱地址，替换为你自己的 QQ 邮箱&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SMTP_FROM_NAME=VaultwardenAdmin &lt;span style="color:#888;font-style:italic"&gt;# 发件人名称，可以自定义&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SMTP_PORT=465 &lt;span style="color:#888;font-style:italic"&gt;# SMTP 端口，QQ 邮箱使用 SSL 加密，端口为 465&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SMTP_SECURITY=force_tls &lt;span style="color:#888;font-style:italic"&gt;# SMTP 加密方式，QQ 邮箱使用 SSL 加密，设置为 force_tls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SMTP_USERNAME=849815996@qq.com &lt;span style="color:#888;font-style:italic"&gt;# SMTP 用户名，通常为你的 QQ 邮箱地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SMTP_PASSWORD=lxpttclhjtcvbeja &lt;span style="color:#888;font-style:italic"&gt;# SMTP 密码，此处填写 QQ 邮箱的 SMTP 授权码，不是邮箱登录密码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SMTP_TIMEOUT=15 &lt;span style="color:#888;font-style:italic"&gt;# 设置 SMTP 超时时间为 15 秒&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - SMTP_EMBED_IMAGES=true &lt;span style="color:#888;font-style:italic"&gt;# 启用将图片嵌入邮件中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; daily_backup:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image: ttionya/vaultwarden-backup:latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; container_name: daily_vaultwarden_backup
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; restart: always
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; depends_on:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - vaultwarden
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - RCLONE_REMOTE_NAME=BitwardenBackup &lt;span style="color:#888;font-style:italic"&gt;# Rclone 远程名称，必须与 rclone 配置中的名称一致&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - RCLONE_REMOTE_DIR=/BitwardenBackup/daily/ &lt;span style="color:#888;font-style:italic"&gt;# 远程存储系统中存放备份文件的目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - BACKUP_KEEP_DAYS=30
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - CRON= 3 4 * * * &lt;span style="color:#888;font-style:italic"&gt;# 每日备份的 cron 表达式，设置为每天 04:00 执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 通用备份设置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - ZIP_PASSWORD=bDxhYG3ANhEqd1Ll0LCdUONmrs8hi4ERZfm &lt;span style="color:#888;font-style:italic"&gt;#备份文件的压缩密码，请替换为你自己的密码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - BACKUP_FILE_SUFFIX=%Y%m%d &lt;span style="color:#888;font-style:italic"&gt;# 每日备份文件后缀，例如：20231027&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - TIMEZONE=Asia/Shanghai &lt;span style="color:#888;font-style:italic"&gt;# 设置时区为 Asia/Shanghai&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 其他可选环境变量：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - DATA_DIR=/data &lt;span style="color:#888;font-style:italic"&gt;# 指定存放 vaultwarden 数据的目录，默认为 /bitwarden/data，如果 vaultwarden 服务中配置了 volumes，这里通常不需要修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - BACKUP_FILE_DATE # 备份文件的时间前缀，默认为 %Y%m%d，通常不需要修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - BACKUP_FILE_DATE_SUFFIX # 备份文件的日期后缀，默认为 &amp;#39;&amp;#39;，通常不需要修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - DATA_DB # 指定 sqlite 数据库文件的路径，默认为 ${DATA_DIR}/db.sqlite3，通常不需要修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - DATA_RSAKEY # 指定 rsa_key 文件的路径，默认为 ${DATA_DIR}/rsa_key，通常不需要修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - DATA_ATTACHMENTS # 指定 attachments 文件夹路径，默认为 ${DATA_DIR}/attachments，通常不需要修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - DATA_SENDS # 指定 sends 文件夹路径，默认为 ${DATA_DIR}/sends，通常不需要修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# 通知设置 (可选，根据需要配置)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - MAIL_SMTP_ENABLE=FALSE # 是否启用邮件通知，默认为 FALSE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - MAIL_SMTP_VARIABLES= # 邮件发送参数，启用邮件通知时需要配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - MAIL_TO= # 接收邮件的地址，启用邮件通知时需要配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - MAIL_WHEN_SUCCESS=TRUE # 备份成功后发送邮件，默认为 TRUE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - MAIL_WHEN_FAILURE=TRUE # 备份失败后发送邮件，默认为 TRUE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - PING_URL= # 备份完成后发送请求的地址 (无论成功或失败)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - PING_URL_CURL_OPTIONS= # 与 PING_URL 搭配使用的 curl 选项&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - PING_URL_WHEN_START= # 备份开始时发送请求的地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - PING_URL_WHEN_START_CURL_OPTIONS= # 与 PING_URL_WHEN_START 搭配使用的 curl 选项&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - PING_URL_WHEN_SUCCESS= # 备份成功后发送请求的地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - PING_URL_WHEN_SUCCESS_CURL_OPTIONS= # 与 PING_URL_WHEN_SUCCESS 搭配使用的 curl 选项&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - PING_URL_WHEN_FAILURE= # 备份失败后发送请求的地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# - PING_URL_WHEN_FAILURE_CURL_OPTIONS= # 与 PING_URL_WHEN_FAILURE 搭配使用的 curl 选项&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# RCLONE_GLOBAL_FLAG: &amp;#39;&amp;#39; # Rclone 全局参数，详见 rclone 文档，通常不需要修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - ./data:/data &lt;span style="color:#888;font-style:italic"&gt;# 挂载 vaultwarden 的数据目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - vaultwarden-rclone-data:/config
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; monthly_backup:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image: ttionya/vaultwarden-backup:latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; container_name: monthly_valutwarden_backup
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; restart: always
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; depends_on:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - vaultwarden
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - RCLONE_REMOTE_NAME=BitwardenBackup
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - RCLONE_REMOTE_DIR=/BitwardenBackup/monthly/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - ZIP_PASSWORD=bDxhYG3ANhEqd1Ll0LCdUONmrs8hi4ERZfm
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - BACKUP_KEEP_DAYS=365
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - CRON= 0 4 1 * * &lt;span style="color:#888;font-style:italic"&gt;# 每月备份的 cron 表达式，设置为每月 1 号 00:00 执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - TIMEZONE=Asia/Shanghai
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - DATA_DIR=/data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - BACKUP_FILE_SUFFIX=%Y%m &lt;span style="color:#888;font-style:italic"&gt;# 每月备份文件后缀，例如：202310&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - ./data:/data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - vaultwarden-rclone-data:/config
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; watchtower:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image: containrrr/watchtower
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; container_name: watchtower
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; restart: unless-stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - /var/run/docker.sock:/var/run/docker.sock
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - TZ=Asia/Shanghai
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - WATCHTOWER_CLEANUP=true
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - WATCHTOWER_SCHEDULE=0 0 4 * * *
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; depends_on:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - vaultwarden
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - daily_backup
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - monthly_backup 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vaultwarden-rclone-data:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; external: &lt;span style="font-weight:bold;text-decoration:underline"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; name: vaultwarden-rclone-data
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;RCLONE_REMOTE_NAME=BitwardenBackup&lt;/code&gt;：&lt;/strong&gt; 将备份目标设置为 &lt;code&gt;union&lt;/code&gt; 远程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;RCLONE_REMOTE_DIR=/BitwardenBackup/daily&lt;/code&gt;：&lt;/strong&gt; 设置备份到 &lt;code&gt;union&lt;/code&gt; 远程的 &lt;code&gt;/BitwardenBackup/daily/&lt;/code&gt; 文件夹，每天4点左右进行备份&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RCLONE_REMOTE_DIR=/BitwardenBackup/monthly:&lt;/code&gt;设置备份到 &lt;code&gt;union&lt;/code&gt; 远程的 &lt;code&gt;/BitwardenBackup/monthly/&lt;/code&gt; 文件夹，每个月一号进行备份&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重启服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker compose up -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;手动备份操作（可用来验证配置是否正确）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker &lt;span style="font-weight:bold;font-style:italic"&gt;exec&lt;/span&gt; daily_vaultwarden_backup bash /app/backup.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 class="heading" id="还原备份还未验证步骤正确性"&gt;
 还原备份（还未验证步骤正确性）
 &lt;a class="anchor" href="#%e8%bf%98%e5%8e%9f%e5%a4%87%e4%bb%bd%e8%bf%98%e6%9c%aa%e9%aa%8c%e8%af%81%e6%ad%a5%e9%aa%a4%e6%ad%a3%e7%a1%ae%e6%80%a7"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;重要提示：&lt;/strong&gt; 还原备份会覆盖已存在的文件。操作前请务必停止 vaultwarden 容器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;下载备份文件到本地计算机。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;进入备份文件所在目录。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;根据你的部署方式选择以下命令之一运行还原容器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a. 使用 &lt;code&gt;docker-compose.yml&lt;/code&gt; 部署的：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run --rm -it &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; --mount &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;type&lt;/span&gt;=volume,source=vaultwarden-data,target=/bitwarden/data/ &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; --mount &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;type&lt;/span&gt;=bind,source=&lt;span style="font-weight:bold;text-decoration:underline"&gt;$(&lt;/span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;pwd&lt;/span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;)&lt;/span&gt;,target=/bitwarden/restore/ &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; ttionya/vaultwarden-backup:latest restore &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; [OPTIONS]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run --rm -it&lt;/code&gt;：运行一个临时的、交互式的 Docker 容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mount type=volume,source=vaultwarden-data,target=/bitwarden/data/&lt;/code&gt; 或 &lt;code&gt;--mount type=bind,source=&amp;quot;本地目录的绝对路径&amp;quot;,target=/data/&lt;/code&gt; 或 &lt;code&gt;--mount type=volume,source=&amp;quot;Docker 卷名称&amp;quot;,target=/data/&lt;/code&gt;：将 vaultwarden 的数据目录挂载到容器的 &lt;code&gt;/bitwarden/data&lt;/code&gt; 或 &lt;code&gt;/data&lt;/code&gt; 目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mount type=bind,source=$(pwd),target=/bitwarden/restore/&lt;/code&gt;：将当前目录（备份文件所在目录）挂载到容器的 &lt;code&gt;/bitwarden/restore&lt;/code&gt; 目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e DATA_DIR=&amp;quot;/data&amp;quot;&lt;/code&gt;：指定 vaultwarden 的数据目录（如果使用“自动备份”方式部署）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ttionya/vaultwarden-backup:latest restore&lt;/code&gt;：指定要运行的 Docker 镜像，并执行 &lt;code&gt;restore&lt;/code&gt; 命令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[OPTIONS]&lt;/code&gt;：可选参数，见下文“还原选项”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 class="heading" id="可用的环境变量"&gt;
 可用的环境变量
 &lt;a class="anchor" href="#%e5%8f%af%e7%94%a8%e7%9a%84%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;所有环境变量都有默认值，可以在不设置任何环境变量的情况下使用 Docker 镜像。&lt;/p&gt;
&lt;h6 class="heading" id="核心配置"&gt;
 核心配置
 &lt;a class="anchor" href="#%e6%a0%b8%e5%bf%83%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;
&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;RCLONE_REMOTE_NAME&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;BitwardenBackup&lt;/code&gt;)：Rclone 远程名称，必须与 &lt;code&gt;rclone config&lt;/code&gt; 中设置的远程名称一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;RCLONE_REMOTE_DIR&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;/BitwardenBackup/&lt;/code&gt;)：远程存储系统中存放备份文件的文件夹路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;RCLONE_GLOBAL_FLAG&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;''&lt;/code&gt;)：Rclone 全局参数，详见 &lt;a href="https://rclone.org/flags/"&gt;Rclone 文档&lt;/a&gt;。&lt;strong&gt;不要添加会改变输出的全局参数，比如 &lt;code&gt;-P&lt;/code&gt;，它会影响删除过期备份文件的操作。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;CRON&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;5 * * * *&lt;/code&gt;)：&lt;code&gt;crond&lt;/code&gt; 的规则，基于 &lt;a href="https://github.com/aptible/supercronic"&gt;&lt;code&gt;supercronic&lt;/code&gt;&lt;/a&gt;。可以在 &lt;a href="https://crontab.guru/#5_*_*_*_*"&gt;这里&lt;/a&gt; 进行测试。解释：默认每小时的 05 分自动备份。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ZIP_ENABLE&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;TRUE&lt;/code&gt;)：是否将所有备份文件打包为压缩文件。设置为 &lt;code&gt;'FALSE'&lt;/code&gt; 时，会单独上传每个备份文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ZIP_PASSWORD&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;WHEREISMYPASSWORD?&lt;/code&gt;)：压缩文件的密码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ZIP_TYPE&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;zip&lt;/code&gt;)：压缩文件格式，支持 &lt;code&gt;zip&lt;/code&gt; 和 &lt;code&gt;7z&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;BACKUP_KEEP_DAYS&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;0&lt;/code&gt;)：在远程存储系统中保留最近 X 天的备份文件。设置为 &lt;code&gt;0&lt;/code&gt; 会保留所有备份文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;BACKUP_FILE_SUFFIX&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;%Y%m%d&lt;/code&gt;)：备份文件后缀，控制备份文件的命名格式。可以在 &lt;a href="https://man7.org/linux/man-pages/man1/date.1.html"&gt;这里&lt;/a&gt; 查看时间格式化说明。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;TIMEZONE&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;UTC&lt;/code&gt;)：设置时区名称，例如北京时区设置为 &lt;code&gt;Asia/Shanghai&lt;/code&gt;。可以在 &lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;维基百科&lt;/a&gt; 查看所有时区名称。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;DATA_DIR&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;/bitwarden/data&lt;/code&gt;)：指定存放 vaultwarden 数据的目录。使用 &lt;code&gt;Docker Compose&lt;/code&gt; 时通常不需要修改，使用自动备份时通常需要修改为 &lt;code&gt;/data&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 class="heading" id="通知"&gt;
 通知
 &lt;a class="anchor" href="#%e9%80%9a%e7%9f%a5"&gt;#&lt;/a&gt;
&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;Mail&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;MAIL_SMTP_ENABLE&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;FALSE&lt;/code&gt;)：启用邮件发送功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;MAIL_SMTP_VARIABLES&lt;/code&gt;&lt;/strong&gt; (默认：无)：邮件发送参数，需要自行配置，详见下方示例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;MAIL_TO&lt;/code&gt;&lt;/strong&gt; (默认：无)：接收邮件的地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;MAIL_WHEN_SUCCESS&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;TRUE&lt;/code&gt;)：备份成功后发送邮件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;MAIL_WHEN_FAILURE&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;TRUE&lt;/code&gt;)：备份失败后发送邮件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;MAIL_SMTP_VARIABLES&lt;/code&gt; 示例 (以 Zoho 为例)：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;-S smtp-use-starttls \
-S smtp=smtp://smtp.zoho.com:587 \
-S smtp-auth=login \
-S smtp-auth-user=&amp;lt;your-email-address&amp;gt; \
-S smtp-auth-password=&amp;lt;your-email-password&amp;gt; \
-S from=&amp;lt;your-email-address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;邮件发送测试：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run --rm -it -e &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;MAIL_SMTP_VARIABLES&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#39;&amp;lt;your smtp variables&amp;gt;&amp;#39;&lt;/span&gt; ttionya/vaultwarden-backup:latest mail &amp;lt;mail send to&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 或&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run --rm -it -e &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;MAIL_SMTP_VARIABLES&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#39;&amp;lt;your smtp variables&amp;gt;&amp;#39;&lt;/span&gt; -e &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;MAIL_TO&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#39;&amp;lt;mail send to&amp;gt;&amp;#39;&lt;/span&gt; ttionya/vaultwarden-backup:latest mail
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;Ping&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PING_URL&lt;/code&gt;&lt;/strong&gt;：备份完成后发送请求的地址 (无论成功或失败)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PING_URL_CURL_OPTIONS&lt;/code&gt;&lt;/strong&gt;：与 &lt;code&gt;PING_URL&lt;/code&gt; 搭配使用的 curl 选项。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PING_URL_WHEN_START&lt;/code&gt;&lt;/strong&gt;：备份开始时发送请求的地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PING_URL_WHEN_START_CURL_OPTIONS&lt;/code&gt;&lt;/strong&gt;：与 &lt;code&gt;PING_URL_WHEN_START&lt;/code&gt; 搭配使用的 curl 选项。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PING_URL_WHEN_SUCCESS&lt;/code&gt;&lt;/strong&gt;：备份成功后发送请求的地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PING_URL_WHEN_SUCCESS_CURL_OPTIONS&lt;/code&gt;&lt;/strong&gt;：与 &lt;code&gt;PING_URL_WHEN_SUCCESS&lt;/code&gt; 搭配使用的 curl 选项。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PING_URL_WHEN_FAILURE&lt;/code&gt;&lt;/strong&gt;：备份失败后发送请求的地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PING_URL_WHEN_FAILURE_CURL_OPTIONS&lt;/code&gt;&lt;/strong&gt;：与 &lt;code&gt;PING_URL_WHEN_FAILURE&lt;/code&gt; 搭配使用的 curl 选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;占位符：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%{subject}&lt;/code&gt;：替换为实际的标题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%{content}&lt;/code&gt;：替换为实际的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ping 发送测试：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run --rm -it &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; -e &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PING_URL&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#39;&amp;lt;your ping url&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; -e &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PING_URL_CURL_OPTIONS&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#39;&amp;lt;your curl options for PING_URL&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; -e &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PING_URL_WHEN_START&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#39;&amp;lt;your ping url&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; -e &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PING_URL_WHEN_START_CURL_OPTIONS&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#39;&amp;lt;your curl options for PING_URL_WHEN_START&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; -e &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PING_URL_WHEN_SUCCESS&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#39;&amp;lt;your ping url&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; -e &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PING_URL_WHEN_SUCCESS_CURL_OPTIONS&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#39;&amp;lt;your curl options for PING_URL_WHEN_SUCCESS&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; -e &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PING_URL_WHEN_FAILURE&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#39;&amp;lt;your ping url&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; -e &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;PING_URL_WHEN_FAILURE_CURL_OPTIONS&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#39;&amp;lt;your curl options for PING_URL_WHEN_FAILURE&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt; ttionya/vaultwarden-backup:latest ping &amp;lt;&lt;span style="font-weight:bold;font-style:italic"&gt;test&lt;/span&gt; identifier&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;test identifier&amp;gt;&lt;/code&gt; 可以是 &lt;code&gt;completion&lt;/code&gt;、&lt;code&gt;start&lt;/code&gt;、&lt;code&gt;success&lt;/code&gt; 或 &lt;code&gt;failure&lt;/code&gt;，决定使用哪一组环境变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 class="heading" id="其他环境变量-通常无需修改"&gt;
 其他环境变量 (通常无需修改)
 &lt;a class="anchor" href="#%e5%85%b6%e4%bb%96%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f-%e9%80%9a%e5%b8%b8%e6%97%a0%e9%9c%80%e4%bf%ae%e6%94%b9"&gt;#&lt;/a&gt;
&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;BACKUP_FILE_DATE&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;%Y%m%d&lt;/code&gt;)：备份文件的时间前缀，建议使用 &lt;code&gt;BACKUP_FILE_SUFFIX&lt;/code&gt; 替代。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;BACKUP_FILE_DATE_SUFFIX&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;''&lt;/code&gt;)：备份文件的日期后缀，建议使用 &lt;code&gt;BACKUP_FILE_SUFFIX&lt;/code&gt; 替代。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;DATA_DB&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;${DATA_DIR}/db.sqlite3&lt;/code&gt;)：指定 sqlite 数据库文件的路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;DATA_RSAKEY&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;${DATA_DIR}/rsa_key&lt;/code&gt;)：指定 rsa_key 文件的路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;DATA_ATTACHMENTS&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;${DATA_DIR}/attachments&lt;/code&gt;)：指定 attachments 文件夹路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;DATA_SENDS&lt;/code&gt;&lt;/strong&gt; (默认：&lt;code&gt;${DATA_DIR}/sends&lt;/code&gt;)：指定 sends 文件夹路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class="heading" id="客户端"&gt;
 客户端
 &lt;a class="anchor" href="#%e5%ae%a2%e6%88%b7%e7%ab%af"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Bitwarden 提供了全平台的客户端软件，以下是常用的一些平台客户端，附上了链接，可以直接下载&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/bitwarden-free-password-m/nngceckbapebfimnlniiiahkandclblb" title="Chrome"&gt;Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/firefox/addon/bitwarden-password-manager/" title="FireFox"&gt;FireFox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itunes.apple.com/app/bitwarden/id1352778147" title="Safari"&gt;Safari&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vault.bitwarden.com/download/?app=desktop&amp;amp;platform=windows" title="Windows"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itunes.apple.com/app/bitwarden/id1352778147" title="MacOS"&gt;MacOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vault.bitwarden.com/download/?app=desktop&amp;amp;platform=linux" title="Linux"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS：App Store 搜索 BitWarden&lt;/li&gt;
&lt;li&gt;Android： Google Play 搜索 BitWarden&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未在此列的平台，可前往官网进行下载：&lt;a href="https://bitwarden.com/download"&gt;Download the Bitwarden Password Manager App for iPhone, Android, Chrome, Safari, and More | Bitwarden&lt;/a&gt;&lt;/p&gt;
&lt;h2 class="heading" id="使用技巧"&gt;
 使用技巧
 &lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%8a%80%e5%b7%a7"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 class="heading" id="匹配模式"&gt;
 匹配模式
 &lt;a class="anchor" href="#%e5%8c%b9%e9%85%8d%e6%a8%a1%e5%bc%8f"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;bitwarden匹配模式十分重要，它决定了你的账号密码&lt;strong&gt;何时自动填充&lt;/strong&gt;到网页中，默认是&lt;code&gt;基础域&lt;/code&gt;模式，可以根据自己需求适当调整。各个匹配模式&lt;a href="https://help.ppgg.in/auto-fill/using-uris#match-detection-options"&gt;摘录&lt;/a&gt;如下：&lt;/p&gt;
&lt;h4 class="heading" id="基础域"&gt;
 基础域
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e5%9f%9f"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;选择基础域，当登录项目的 URI 值的顶级域名和第二级名与检测到的资源相匹配时，Bitwarden 将弹出提示以提供自动填充。&lt;br&gt;
例如，URI 的值为&lt;code&gt;https://google.com&lt;/code&gt;，使用基础域匹配检测：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;URL&lt;/th&gt;
 &lt;th&gt;自动填充？&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="http://google.com/"&gt;http://google.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://accounts.google.com/"&gt;https://accounts.google.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://google.net/"&gt;https://google.net&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="http://yahoo.com/"&gt;http://yahoo.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 class="heading" id="主机"&gt;
 主机
 &lt;a class="anchor" href="#%e4%b8%bb%e6%9c%ba"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;选择主机，当登录项目的 URI 值的主机名和端口（若指定了）与检测到的资源相匹配时，Bitwarden 将弹出提示以提供自动填充。&lt;br&gt;
例如，URI 的值为&lt;code&gt;https://sub.domain.com:4000&lt;/code&gt;，使用主机匹配检测：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;URL&lt;/th&gt;
 &lt;th&gt;自动填充？&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="http://sub.domain.com:4000/"&gt;http://sub.domain.com:4000&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://sub.domain.com:4000/page.html"&gt;https://sub.domain.com:4000/page.html&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://domain.com/"&gt;https://domain.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://sub.domain.com/"&gt;https://sub.domain.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://sub2.sub.domain.com:4000/"&gt;https://sub2.sub.domain.com:4000&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://sub.domain.com:5000/"&gt;https://sub.domain.com:5000&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 class="heading" id="开始于"&gt;
 开始于
 &lt;a class="anchor" href="#%e5%bc%80%e5%a7%8b%e4%ba%8e"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;选择开始于，当检测到的资源以登录项目的 URI 值开头（无论后面跟什么）时，Bitwarden 将弹出提示以提供自动填充。&lt;br&gt;
例如，URI 的值为&lt;code&gt;https://sub.domain.com/path/&lt;/code&gt;，使用开始于匹配检测：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;URL&lt;/th&gt;
 &lt;th&gt;自动填充？&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://sub.domain.com/path/"&gt;https://sub.domain.com/path/&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://sub.domain.com/path/page.html"&gt;https://sub.domain.com/path/page.html&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://sub.domain.com/"&gt;https://sub.domain.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://sub.domain.com:4000/path/page.html%EF%BC%88%E8%A2%AB%E7%AB%AF%E5%8F%A3%E9%98%BB%E6%96%AD%E4%BA%86%EF%BC%89"&gt;https://sub.domain.com:4000/path/page.html（被端口阻断了）&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://sub.domain.com/path%EF%BC%88%E7%BC%BA%E5%B0%91%E6%96%9C%E6%9D%A0%EF%BC%89"&gt;https://sub.domain.com/path（缺少斜杠）&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 class="heading" id="正则表达式"&gt;
 正则表达式
 &lt;a class="anchor" href="#%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;选择正则表达式，当检测到的资源与一个指定的正则表达式相匹配时，Bitwarden 将弹出提示以提供自动填充。正则表达式始终不区分大小写。&lt;/p&gt;
&lt;h5 class="heading" id="不安全示例"&gt;
 不安全示例
 &lt;a class="anchor" href="#%e4%b8%8d%e5%ae%89%e5%85%a8%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;URI 的值为&lt;code&gt;^https://.*google\.com$&lt;/code&gt;，使用正则表达式匹配检测：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;URL&lt;/th&gt;
 &lt;th&gt;自动填充？&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://google.com/"&gt;https://google.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://sub.google.com/"&gt;https://sub.google.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://malicious-site.com/?q=google.com"&gt;https://malicious-site.com?q=google.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="http://google.com/"&gt;http://google.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://yahoo.com/"&gt;https://yahoo.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这可能比预期的要匹配得更多。&lt;/p&gt;
&lt;h5 class="heading" id="安全示例"&gt;
 安全示例
 &lt;a class="anchor" href="#%e5%ae%89%e5%85%a8%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;URI 的值为&lt;code&gt;^https://[a-z]+\.wikipedia\.org/w/index\.php&lt;/code&gt;，使用正则表达式匹配检测：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;URL&lt;/th&gt;
 &lt;th&gt;自动填充？&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;amp;returnto=Bitwarden"&gt;https://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;amp;returnto=Bitwarden&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://pl.wikipedia.org/w/index.php?title=Specjalna:Zaloguj&amp;amp;returnto=Bitwarden"&gt;https://pl.wikipedia.org/w/index.php?title=Specjalna:Zaloguj&amp;amp;returnto=Bitwarden&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://en.wikipedia.org/w/index.php"&gt;https://en.wikipedia.org/w/index.php&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://malicious-site.com/"&gt;https://malicious-site.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Bitwarden"&gt;https://en.wikipedia.org/wiki/Bitwarden&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 class="heading" id="精确"&gt;
 精确
 &lt;a class="anchor" href="#%e7%b2%be%e7%a1%ae"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;选择精确，当登录项目的 URI 值与检测到的资源精确匹配时，Bitwarden 将弹出提示以提供自动填充。&lt;br&gt;
例如，URI 的值为&lt;code&gt;https://www.google.com/page.html&lt;/code&gt;，使用精确匹配检测：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;URL&lt;/th&gt;
 &lt;th&gt;自动填充？&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://www.google.com/page.html"&gt;https://www.google.com/page.html&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✔︎&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="http://www.google.com/page.html"&gt;http://www.google.com/page.html&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://www.google.com/page.html?query=123"&gt;https://www.google.com/page.html?query=123&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;a href="https://www.google.com/"&gt;https://www.google.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;✘&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 class="heading" id="从不"&gt;
 从不
 &lt;a class="anchor" href="#%e4%bb%8e%e4%b8%8d"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;选择从不，Bitwarden 将&lt;strong&gt;从不&lt;/strong&gt;为登录项目弹出以提供自动填充。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;帮助文档:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rs.ppgg.in/"&gt;关于 | Vaultwarden Wiki 中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.ppgg.in/"&gt;关于 | Bitwarden 帮助中心中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>域名管理：Cloudflare DNS托管与SSL证书配置</title><link>https://blog.yzyy.de/explore/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%9F%9F%E5%90%8D%E7%9B%B8%E5%85%B3/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/explore/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%9F%9F%E5%90%8D%E7%9B%B8%E5%85%B3/</guid><description>&lt;h1 class="heading" id="域名相关"&gt;
 域名相关
 &lt;a class="anchor" href="#%e5%9f%9f%e5%90%8d%e7%9b%b8%e5%85%b3"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;本篇记录一下域名相关的操作吧，包括到cf托管，申请与安装SSL证书等。&lt;/p&gt;
&lt;h2 class="heading" id="dns解析和将域名托管到cloudflare"&gt;
 DNS解析和将域名托管到cloudflare
 &lt;a class="anchor" href="#dns%e8%a7%a3%e6%9e%90%e5%92%8c%e5%b0%86%e5%9f%9f%e5%90%8d%e6%89%98%e7%ae%a1%e5%88%b0cloudflare"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;感谢&lt;a href="https://sarakale.top/blog/posts/3a730d01/#%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C"&gt;Namesilo/Cloudflare域名注册和解析设置教程 | SaraKale&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;到 &lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt; 添加你的站点，选择 Free 免费计划。











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="Pasted%20image%2020250113153620" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250113153620.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在下一页上，您需要选择首选的 CDN 计划。选择 Free 计划。单击其图标和&lt;strong&gt;确认计划&lt;/strong&gt;按钮继续：











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="Pasted%20image%2020250113153644" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250113153644.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果之前已经做过解析就可以看到现有的DNS记录。











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="Pasted%20image%2020250113153828" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250113153828.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里先不用管，继续下一步。











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="Pasted%20image%2020250113153859" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250113153859.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以看到给了两个NS服务器，回到域名提供商后台更改NS服务器。











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="Pasted%20image%2020250113153945" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250113153945.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NameCheap更改ns服务器参考官方教程&lt;a href="https://www.namecheap.com/support/knowledgebase/article.aspx/9607/2210/how-to-set-up-dns-records-for-your-domain-in-a-cloudflare-account/"&gt;Title Unavailable | Site Unreachable&lt;/a&gt;，其他域名服务商大同小异。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class="heading" id="申请tlsssl证书"&gt;
 申请TLS\SSL证书
 &lt;a class="anchor" href="#%e7%94%b3%e8%af%b7tlsssl%e8%af%81%e4%b9%a6"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;有两种方式，目前选择cloudflare开启代理的模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动续签：&lt;/li&gt;
&lt;li&gt;使用cloudflare的服务，开启小黄云，就可以使用一种泛域名证书，只能当做源站和cloudflare握手的凭证，其他的不认。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class="heading" id="cloudflare的服务"&gt;
 cloudflare的服务
 &lt;a class="anchor" href="#cloudflare%e7%9a%84%e6%9c%8d%e5%8a%a1"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;下面采用cloudflare的服务，也是一份cloudflare的初步探索的记录&lt;/p&gt;
&lt;h4 class="heading" id="dns管理"&gt;
 DNS管理
 &lt;a class="anchor" href="#dns%e7%ae%a1%e7%90%86"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;可以在DNS界面管理DNS解析，以及管理是否开启小黄云代理











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="e%2020250113163808" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250113163808.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 class="heading" id="ssltls证书"&gt;
 SSL\TLS证书
 &lt;a class="anchor" href="#ssltls%e8%af%81%e4%b9%a6"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="Pasted%20image%2020250113164004" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250113164004.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;灵活：web浏览器和cloudflare之间采用443HTTPS，cloudflare和cloudflare之间采用80HTTP&lt;/li&gt;
&lt;li&gt;完全：使用其他未公开认证的SSL证书时采用，源服务器必须配置 SSL 证书，但 Cloudflare &lt;strong&gt;不验证证书的有效性&lt;/strong&gt;（例如，可以是自签名证书或过期证书）。&lt;/li&gt;
&lt;li&gt;完全（严格）：客户端到 Cloudflare：HTTPS（使用 Cloudflare Universal SSL 证书）。 Cloudflare 到源服务器：&lt;strong&gt;HTTPS（加密）&lt;/strong&gt;。源服务器必须配置有效的 SSL 证书，该证书必须由&lt;strong&gt;受信任的 CA 机构签发&lt;/strong&gt;或为 &lt;strong&gt;Cloudflare Origin CA 证书&lt;/strong&gt;，并且证书中的域名必须与请求的域名匹配。Cloudflare 会验证证书的有效性，包括有效期、颁发机构和域名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以在源服务器页面申请 &lt;strong&gt;Cloudflare Origin CA 证书&lt;/strong&gt;，并将该证书放到服务器上。源证书仅对Cloudflare与源服务器之间的加密有效。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="Pasted%20image%2020250113164800" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250113164800.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 class="heading" id="under-attack"&gt;
 Under Attack
 &lt;a class="anchor" href="#under-attack"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可以在安全性-设置里打开Under Attack模式，强制开启验证。











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="Pasted%20image%2020250113165205" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250113165205.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 class="heading" id="使用-acmesh-dns-验证的方式签发-letsencrypt-证书"&gt;
 使用 acme.sh DNS 验证的方式签发 Let&amp;rsquo;sEncrypt 证书
 &lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8-acmesh-dns-%e9%aa%8c%e8%af%81%e7%9a%84%e6%96%b9%e5%bc%8f%e7%ad%be%e5%8f%91-letsencrypt-%e8%af%81%e4%b9%a6"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;参考：&lt;a href="https://blog.uuphy.com/posts/%E9%85%8D%E7%BD%AE-acme.sh-%E5%85%8D%E8%B4%B9%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/"&gt;使用 acme.sh DNS 验证的方式签发 Let&amp;rsquo;sEncrypt 证书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://acme.sh/"&gt;acme.sh&lt;/a&gt; 是一个用来自动获取和管理 SSL/TLS 证书的开源脚本，可以从 Let’s Encrypt 等多个 CA 获取免费的证书。结合使用 Cloudflare DNS 验证的模式申请泛域名证书，并自动续签。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2025-07-17更新&lt;/p&gt;
&lt;p&gt;方案有改进，请看&lt;a href="https://blog.yzyy.de/post/%E6%96%B0%E8%B4%AD%E4%B8%80%E5%8F%B08gb%E7%9A%84vds/#自动续签的方案改进"&gt;新购一台8GB的VDS&lt;/a&gt;。
主要优化了一台vps多个域名的配置方式，如果是单个域名，以下方案相同。&lt;/p&gt;
&lt;h4 class="heading" id="cloudflare-api"&gt;
 Cloudflare API
 &lt;a class="anchor" href="#cloudflare-api"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;使用 Cloudflare DNS 模式需要准备:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zone ID&lt;/li&gt;
&lt;li&gt;Account ID&lt;/li&gt;
&lt;li&gt;API Token&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 class="heading" id="获取-zone-id-account-id"&gt;
 获取 Zone ID, Account ID
 &lt;a class="anchor" href="#%e8%8e%b7%e5%8f%96-zone-id-account-id"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;这两种 ID 直接在 Overview 页就能找到。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="image" src="https://webp.050612.xyz/2025/02/2edb816d28456e59ad4da2b02c3ff69450847554_2_690x370.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h5 class="heading" id="获取-api-token"&gt;
 获取 API Token
 &lt;a class="anchor" href="#%e8%8e%b7%e5%8f%96-api-token"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;Overview 页点击 &lt;code&gt;获取您的 API 令牌&lt;/code&gt; 进入 API Tokens 页。&lt;/p&gt;
&lt;p&gt;点击 API Tokens 项旁边 &lt;code&gt;创建令牌&lt;/code&gt; 按钮，接着选择 &lt;code&gt;编辑区域 DNS&lt;/code&gt; 的模板，点击 &lt;code&gt;使用模板&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="image" src="https://webp.050612.xyz/2025/02/e15d8a0a1de821faab5355e610b581016975b974_2_690x265.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="image" src="https://webp.050612.xyz/2025/02/42f87595d27a6fb3ed1fe329934517f5416920c6_2_690x210.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;区域资源&lt;/code&gt; 里选择需要签发的域名，&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;客户端 IP 地址筛选&lt;/code&gt; 里建议写下 acme.sh 所在的主机做为白名单，需要注意，如果服务器有 ipv6 地址，则也需要添加，因为有可能会 ipv6 优先访问。&lt;/p&gt;
&lt;p&gt;击 &lt;code&gt;继续以显示摘要&lt;/code&gt; , 确认没问题后最后点击 &lt;code&gt;创建令牌&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="image" src="https://webp.050612.xyz/2025/02/e88966d6049c27c31c632f9471ec1b79be287b59_2_510x499.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;此时就会出现一个 Token,，即 CF_Token，拷贝备用。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="image" src="https://webp.050612.xyz/2025/02/ca6093ea6bf83325809ea6179d4239ae2c9818cc_2_690x404.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h5 class="heading" id="注意"&gt;
 注意
 &lt;a class="anchor" href="#%e6%b3%a8%e6%84%8f"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意新增域名时，需要更改API Token所包含的域名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意有多台机器时，需要新增机器的IP到白名单&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="update_cf_api_token" src="https://webp.050612.xyz/2025/02/update_cf_api_token.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;













&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="cf-api-token-ip" src="https://webp.050612.xyz/2025/02/cf-api-token-ip.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 class="heading" id="一个完整的演示"&gt;
 一个完整的演示
 &lt;a class="anchor" href="#%e4%b8%80%e4%b8%aa%e5%ae%8c%e6%95%b4%e7%9a%84%e6%bc%94%e7%a4%ba"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;感谢：&lt;a href="https://atpx.com/blog/auto-update-ssl-with-acme/"&gt;使用 acme.sh 自动签发和更新证书 - atpX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了使整个流程更加清晰（&lt;del&gt;方便自己操作&lt;/del&gt;），这里贴一个自己平时使用 acme.sh 申请证书的完整流程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申请方式：DNS 认证（使用 Cloudflare API）&lt;/li&gt;
&lt;li&gt;申请证书 CA：Let’s Encrypt&lt;/li&gt;
&lt;li&gt;申请证书类型：RSA + ECC 两个通配符证书&lt;/li&gt;
&lt;li&gt;**同一台主机多个域名的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后续申请证书的命令，都是在 root 用户下执行的，请先使用 &lt;code&gt;su&lt;/code&gt; 切换到 root 用户。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 进入root用户&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;su
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 安装 acme.sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://get.acme.sh | sh
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 刷新 shell 变量配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 导入 Cloudflare API Token&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;export&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;CF_Token&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;export&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;CF_Account_ID&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;export&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;CF_Zone_ID&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 设置默认 CA 为 Let&amp;#39;s Encrypt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --set-default-ca --server letsencrypt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 签发 RSA 证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --issue --dns dns_cf -d xxx.xyz -d *.xxx.xyz --keylength 2048
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 安装 RSA 证书到指定路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --install-cert -d domain.tld &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--key-file /path/to/ssl/domain.tld_private.key &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--fullchain-file /path/to/ssl/domain.tld_chain.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--capath /path/to/ssl/domain.tld_ca.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--reloadcmd &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;service nginx reload&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 签发 ECC 证书，若不需要，跳过即可&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --issue --dns dns_cf -d domain.tld -d *.domain.tld --keylength ec-256
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 安装 ECC 证书到指定路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --install-cert -d domain.tld --ecc &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--key-file /path/to/ssl/ecc_domain.tld_private.key &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--fullchain-file /path/to/ssl/ecc_domain.tld_chain.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--capath /path/to/ssl/ecc_domain.tld_ca.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--reloadcmd &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;service nginx reload&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;###############################第二个域名#####################################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 取消环境变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;unset&lt;/span&gt; CF_Token
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;unset&lt;/span&gt; CF_Account_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;unset&lt;/span&gt; CF_Zone_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 至此证书安装完毕&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 下面是同一台主机申请第二个域名证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 导入另一个 Cloudflare API Token&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;export&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;CF_Token&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;export&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;CF_Account_ID&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;export&lt;/span&gt; &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;CF_Zone_ID&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 新建一个文件夹作为 config home，默认会把所有文件存在这里&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir /root/.acme2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 设置默认 CA 为 Let&amp;#39;s Encrypt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --config-home /root/.acme2 --set-default-ca --server letsencrypt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 签发 RSA 证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --config-home /root/.acme2 --issue --dns dns_cf -d domain.tld -d *.domain.tld --keylength 2048
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 安装 RSA 证书到指定路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --config-home /root/.acme2 &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--install-cert -d domain.tld &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--key-file /path/to/ssl/domain.tld_private.key &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--fullchain-file /path/to/ssl/domain.tld_chain.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--capath /path/to/ssl/domain.tld_ca.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--reloadcmd &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;service nginx reload&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 签发 ECC 证书，若不需要，跳过即可&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --config-home /root/.acme2 --issue --dns dns_cf -d domain.tld -d *.domain.tld --keylength ec-256
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 安装 ECC 证书到指定路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;acme.sh --config-home /root/.acme2 &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--install-cert -d domain.tld --ecc &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--key-file /path/to/ssl/ecc_domain.tld_private.key &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--fullchain-file /path/to/ssl/ecc_domain.tld_chain.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--capath /path/to/ssl/ecc_domain.tld_ca.pem &lt;span style="color:#666;font-style:italic"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-style:italic"&gt;&lt;/span&gt;--reloadcmd &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;service nginx reload&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 手动添加另一个 cron 任务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# crontab -e&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;50 0 * * * &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;/root/.acme.sh&amp;#34;&lt;/span&gt;/acme.sh --cron --home &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;/root/.acme.sh&amp;#34;&lt;/span&gt; --config-home &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;/root/.acme2&amp;#34;&lt;/span&gt; &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class="heading" id="两个服务的比较"&gt;
 两个服务的比较
 &lt;a class="anchor" href="#%e4%b8%a4%e4%b8%aa%e6%9c%8d%e5%8a%a1%e7%9a%84%e6%af%94%e8%be%83"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h4 class="heading" id="优点"&gt;
 优点
 &lt;a class="anchor" href="#%e4%bc%98%e7%82%b9"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;acme.sh` + Let&amp;rsquo;s Encrypt + Cloudflare DNS
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自动化&lt;/strong&gt;：&lt;code&gt;acme.sh&lt;/code&gt; 脚本可以自动完成证书的申请、验证和续期过程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无需开放 80/443 端口&lt;/strong&gt;：使用 DNS 验证方式，无需在服务器上开放 80 或 443 端口，提高了安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不依赖 Cloudflare 代理&lt;/strong&gt;：这种方式只使用 Cloudflare 的 DNS 服务，不依赖 Cloudflare 的代理服务&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Cloudflare
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Universal SSL&lt;/strong&gt;：Cloudflare 免费提供 Universal SSL 证书，可以快速启用 HTTPS。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Origin CA 证书&lt;/strong&gt;：Cloudflare 提供 Origin CA 证书，可以实现 Cloudflare 到源服务器的加密连接（严格模式）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class="heading" id="缺点"&gt;
 缺点
 &lt;a class="anchor" href="#%e7%bc%ba%e7%82%b9"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;acme.sh` + Let&amp;rsquo;s Encrypt + Cloudflare DNS
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;配置相对复杂&lt;/strong&gt;：相比于使用 Cloudflare 的一键 SSL 功能，这种方式需要手动配置 &lt;code&gt;acme.sh&lt;/code&gt; 脚本和服务器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不提供 DDoS 防护和其他 Cloudflare 功能&lt;/strong&gt;：这种方式只使用了 Cloudflare 的 DNS 服务，不提供 DDoS 防护、CDN 加速、WAF 等其他 Cloudflare 功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Cloudflare
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Origin CA 证书浏览器不信任&lt;/strong&gt;：Cloudflare 的 Origin CA 证书不被浏览器信任，需要配合 Cloudflare 的代理服务使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class="heading" id="应用场景比较"&gt;
 应用场景比较
 &lt;a class="anchor" href="#%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af%e6%af%94%e8%be%83"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;特性&lt;/th&gt;
 &lt;th&gt;&lt;code&gt;acme.sh&lt;/code&gt; + Let&amp;rsquo;s Encrypt + Cloudflare DNS&lt;/th&gt;
 &lt;th&gt;Cloudflare 服务&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;不需要 Cloudflare 代理 &lt;!-- raw HTML omitted --&gt;需要在其他服务上使用证书 &lt;!-- raw HTML omitted --&gt;希望完全控制证书&lt;/td&gt;
 &lt;td&gt;需要 DDoS 防护&lt;!-- raw HTML omitted --&gt;需要 CDN 加速&lt;!-- raw HTML omitted --&gt;需要 WAF&lt;!-- raw HTML omitted --&gt;希望隐藏服务器 IP &lt;!-- raw HTML omitted --&gt;需要简单易用的 SSL 配置&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;SSL 证书&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;Let&amp;rsquo;s Encrypt 免费证书&lt;/td&gt;
 &lt;td&gt;Cloudflare Universal SSL 或 Origin CA 证书&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;泛域名证书&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;支持&lt;/td&gt;
 &lt;td&gt;支持（Origin CA 证书需配合代理使用）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;服务器 IP&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;暴露&lt;/td&gt;
 &lt;td&gt;隐藏&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;DDoS 防护&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;无&lt;/td&gt;
 &lt;td&gt;有&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;CDN 加速&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;无&lt;/td&gt;
 &lt;td&gt;有&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;WAF&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;无&lt;/td&gt;
 &lt;td&gt;有&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;配置难度&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;相对复杂&lt;/td&gt;
 &lt;td&gt;简单&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;控制权&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;完全控制&lt;/td&gt;
 &lt;td&gt;部分控制&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;strong&gt;依赖性&lt;/strong&gt;&lt;/td&gt;
 &lt;td&gt;仅依赖 Cloudflare DNS 和 Let&amp;rsquo;s Encrypt&lt;/td&gt;
 &lt;td&gt;依赖 Cloudflare 的所有服务&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>服务器配置实战指南：从安全加固到Nginx反代部署</title><link>https://blog.yzyy.de/explore/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/</link><pubDate>Fri, 12 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/explore/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/</guid><description>&lt;h2 class="heading" id="安全性"&gt;
 安全性
 &lt;a class="anchor" href="#%e5%ae%89%e5%85%a8%e6%80%a7"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;参考&lt;a href="https://blog.yzyy.de/explore/%E6%9C%8D%E5%8A%A1%E5%99%A8/vps%E5%9F%BA%E6%9C%AC%E5%AE%89%E5%85%A8%E6%8E%AA%E6%96%BD/"&gt;VPS基础安全配置实践指南&lt;/a&gt;进行配置&lt;/p&gt;
&lt;hr&gt;
&lt;h2 class="heading" id="安装docker和dockercompose"&gt;
 安装docker和dockercompose
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85docker%e5%92%8cdockercompose"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 class="heading" id="安装-docker"&gt;
 安装 Docker
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85-docker"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h4 class="heading" id="更新软件包列表"&gt;
 更新软件包列表
 &lt;a class="anchor" href="#%e6%9b%b4%e6%96%b0%e8%bd%af%e4%bb%b6%e5%8c%85%e5%88%97%e8%a1%a8"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class="heading" id="安装必要的软件包"&gt;
 安装必要的软件包
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85%e5%bf%85%e8%a6%81%e7%9a%84%e8%bd%af%e4%bb%b6%e5%8c%85"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;安装一些必要的软件包，这些软件包允许 &lt;code&gt;apt&lt;/code&gt; 通过 HTTPS 使用仓库。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install apt-transport-https ca-certificates curl software-properties-common
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class="heading" id="添加-docker-的官方-gpg-密钥"&gt;
 添加 Docker 的官方 GPG 密钥
 &lt;a class="anchor" href="#%e6%b7%bb%e5%8a%a0-docker-%e7%9a%84%e5%ae%98%e6%96%b9-gpg-%e5%af%86%e9%92%a5"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;添加 Docker 的官方 GPG 密钥，以便验证下载的软件包。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class="heading" id="添加-docker-仓库"&gt;
 添加 Docker 仓库
 &lt;a class="anchor" href="#%e6%b7%bb%e5%8a%a0-docker-%e4%bb%93%e5%ba%93"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;将 Docker 的官方仓库添加到你的 &lt;code&gt;apt&lt;/code&gt; 软件源列表中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;deb [arch=&lt;/span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;$(&lt;/span&gt;dpkg --print-architecture&lt;span style="font-weight:bold;text-decoration:underline"&gt;)&lt;/span&gt;&lt;span style="color:#666;font-style:italic"&gt; signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu &lt;/span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;$(&lt;/span&gt;lsb_release -cs&lt;span style="font-weight:bold;text-decoration:underline"&gt;)&lt;/span&gt;&lt;span style="color:#666;font-style:italic"&gt; stable&amp;#34;&lt;/span&gt; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再次更新软件包列表，以包含新添加的 Docker 仓库。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class="heading" id="安装-docker-engine"&gt;
 安装 Docker Engine
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85-docker-engine"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;安装&lt;code&gt;Docker Engine、Docker CLI&lt;/code&gt;和&lt;code&gt; Containerd&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install docker-ce docker-ce-cli containerd.io
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class="heading" id="验证-docker-安装"&gt;
 验证 Docker 安装
 &lt;a class="anchor" href="#%e9%aa%8c%e8%af%81-docker-%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;验证 Docker 是否成功安装，并检查 Docker 服务是否正在运行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl status docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 Docker 服务正在运行，应该看到类似 &lt;code&gt;active (running)&lt;/code&gt; 的输出。&lt;/p&gt;
&lt;p&gt;也可以运行一个简单的 Docker 镜像来验证 Docker 是否可以正常工作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo docker run hello-world
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应该看到一条欢迎消息，表明 Docker 安装成功。&lt;/p&gt;
&lt;h3 class="heading" id="安装-docker-composev2-可跳过"&gt;
 安装 Docker Compose&lt;strong&gt;V2&lt;/strong&gt; (可跳过)
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85-docker-composev2-%e5%8f%af%e8%b7%b3%e8%bf%87"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Docker 官方为了简化开发者的安装和使用流程，已经将 Docker Compose V2 作为一个核心插件，并将其包含在标准的 Docker Engine (&lt;code&gt;docker-ce&lt;/code&gt;) 安装包的&lt;strong&gt;依赖&lt;/strong&gt;或&lt;strong&gt;推荐&lt;/strong&gt;列表中。&lt;/p&gt;
&lt;p&gt;这意味着，当上面步骤中使用 &lt;code&gt;apt&lt;/code&gt; 安装 &lt;code&gt;docker-ce&lt;/code&gt; 时，&lt;code&gt;apt&lt;/code&gt; 会自动解析这些依赖关系，并将 &lt;code&gt;docker-compose-plugin&lt;/code&gt; 一并安装。&lt;/p&gt;
&lt;p&gt;到这一步直接使用&lt;code&gt;docker compose version&lt;/code&gt;验证是否安装成功。&lt;/p&gt;
&lt;h4 class="heading" id="下载-docker-compose-插件"&gt;
 下载 Docker Compose 插件
 &lt;a class="anchor" href="#%e4%b8%8b%e8%bd%bd-docker-compose-%e6%8f%92%e4%bb%b6"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;从 GitHub Releases 下载 Docker Compose 插件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install docker-compose-plugin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 class="heading" id="验证-docker-compose-安装"&gt;
 验证 Docker Compose 安装
 &lt;a class="anchor" href="#%e9%aa%8c%e8%af%81-docker-compose-%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;验证 Docker Compose 是否成功安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker compose version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 Docker Compose 成功安装，应该看到 Docker Compose 的版本信息。&lt;/p&gt;
&lt;h3 class="heading" id="添加用户到-docker-用户组"&gt;
 添加用户到 Docker 用户组
 &lt;a class="anchor" href="#%e6%b7%bb%e5%8a%a0%e7%94%a8%e6%88%b7%e5%88%b0-docker-%e7%94%a8%e6%88%b7%e7%bb%84"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;默认情况下，只有 &lt;code&gt;root&lt;/code&gt; 用户或具有 &lt;code&gt;sudo&lt;/code&gt; 权限的用户才能运行 Docker 命令。为了让普通用户也能运行 Docker 命令，你需要将用户添加到 &lt;code&gt;docker&lt;/code&gt; 用户组。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo usermod -aG docker &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;$USER&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行以下命令来应用用户组更改。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;newgrp docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以在不使用 &lt;code&gt;sudo&lt;/code&gt; 的情况下运行 Docker 命令了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 class="heading" id="配置证书和反代"&gt;
 配置证书和反代
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae%e8%af%81%e4%b9%a6%e5%92%8c%e5%8f%8d%e4%bb%a3"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 class="heading" id="下载证书和私钥"&gt;
 下载证书和私钥
 &lt;a class="anchor" href="#%e4%b8%8b%e8%bd%bd%e8%af%81%e4%b9%a6%e5%92%8c%e7%a7%81%e9%92%a5"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;将在cf中生成的源证书的cert和key复制到.pem和.key文件中&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="20250717203617645" src="https://webp.050612.xyz/2025/07/20250717203617645.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 class="heading" id="安装-nginx"&gt;
 安装 nginx
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85-nginx"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class="heading" id="上传证书和私钥到服务器"&gt;
 上传证书和私钥到服务器
 &lt;a class="anchor" href="#%e4%b8%8a%e4%bc%a0%e8%af%81%e4%b9%a6%e5%92%8c%e7%a7%81%e9%92%a5%e5%88%b0%e6%9c%8d%e5%8a%a1%e5%99%a8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;以下操作建议提权为root进行操作和检查&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用su，输入root密码提权&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;su
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;检查 &lt;code&gt;/etc/ssl/certs&lt;/code&gt;和&lt;code&gt;/etc/ssl/private&lt;/code&gt;目录是否存在，并将.pem和.key文件分别传到这两个目录里&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mv xxx.com.pem /etc/ssl/certs/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mv xxx.com.key /etc/ssl/private/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;设置权限&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sudo chmod 600 /etc/ssl/private/api.xxx.com.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class="heading" id="配置nginx"&gt;
 配置nginx
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%aenginx"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;创建 Nginx 配置文件&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo vim /etc/nginx/sites-available/api.xxx.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;&lt;strong&gt;添加以下配置&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-txt" data-lang="txt"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;server {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; listen 80;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; server_name api.xxx.com;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; return 301 https://$host$request_uri;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;server {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; listen 443 ssl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; server_name api.xxx.com;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ssl_certificate /etc/ssl/certs/api.xxx.com.pem;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ssl_certificate_key /etc/ssl/private/api.xxx.com.key;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ssl_protocols TLSv1.2 TLSv1.3; # 根据需要调整
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ssl_ciphers HIGH:!aNULL:!MD5; # 根据需要调整
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; client_max_body_size 100m;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; location / {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_pass http://127.0.0.1:5005; # 替换为你的 chat2api 服务监听的地址和端口
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header Host $host;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header X-Real-IP $remote_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; proxy_set_header X-Forwarded-Proto $scheme;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server_name&lt;/code&gt;：设置为 &lt;code&gt;api.xxx.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_certificate&lt;/code&gt;：指向&lt;code&gt;.pem&lt;/code&gt;证书文件的路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_certificate_key&lt;/code&gt;：指向&lt;code&gt;.key&lt;/code&gt;私钥文件的路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proxy_pass&lt;/code&gt;：设置为`服务监听的地址和端口&lt;/li&gt;
&lt;li&gt;第一个 &lt;code&gt;server&lt;/code&gt; 块用于将 HTTP 请求重定向到 HTTPS&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;strong&gt;启用 Nginx 配置&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;创建软链接到 &lt;code&gt;sites-enabled&lt;/code&gt; 目录：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ln -s /etc/nginx/sites-available/api.vtofun.me /etc/nginx/sites-enabled/api.vtofun.me
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;移除默认的 Nginx 配置：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo rm /etc/nginx/sites-enabled/default
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;测试 Nginx 配置：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo nginx -t
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;重启 Nginx 服务：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl restart nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 class="heading" id="swap-空间配置"&gt;
 Swap 空间配置
 &lt;a class="anchor" href="#swap-%e7%a9%ba%e9%97%b4%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 class="heading" id="创建swap空间"&gt;
 创建swap空间
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%baswap%e7%a9%ba%e9%97%b4"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;检查 Swap 空间：
首先，检查系统当前是否已经配置了 Swap 空间：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;free -h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;创建 Swap 文件：
使用 &lt;code&gt;fallocate&lt;/code&gt; 命令创建一个 Swap 文件。例如，创建一个 2GB 的 Swap 文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo fallocate -l 2G /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者，你也可以使用 &lt;code&gt;dd&lt;/code&gt; 命令创建 Swap 文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo dd &lt;span style="font-weight:bold;text-decoration:underline"&gt;if&lt;/span&gt;=/dev/zero &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;of&lt;/span&gt;=/swapfile &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;bs&lt;/span&gt;=1M &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;count&lt;/span&gt;=2048
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将创建一个名为 &lt;code&gt;/swapfile&lt;/code&gt;，大小为 2GB 的文件。可以根据需要调整 &lt;code&gt;count&lt;/code&gt; 的值来改变 Swap 文件的大小。
3. 设置 Swap 文件权限：&lt;/p&gt;
&lt;p&gt;为了安全起见，设置 Swap 文件的权限，只允许 root 用户读写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo chmod 600 /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="4"&gt;
&lt;li&gt;格式化为 Swap 空间：
使用 &lt;code&gt;mkswap&lt;/code&gt; 命令将文件格式化为 Swap 空间：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mkswap /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="5"&gt;
&lt;li&gt;启用 Swap 空间：
使用 &lt;code&gt;swapon&lt;/code&gt; 命令启用 Swap 空间：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo swapon /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="6"&gt;
&lt;li&gt;验证 Swap 空间：
再次使用 &lt;code&gt;free -h&lt;/code&gt; 命令验证 Swap 空间是否已启用：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;free -h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应该能看到 &lt;code&gt;Swap&lt;/code&gt; 那一行显示了你刚刚配置的 Swap 空间大小。&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;设置开机自动挂载 Swap 空间：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了使 Swap 空间在系统重启后仍然有效，需要将其添加到 &lt;code&gt;/etc/fstab&lt;/code&gt; 文件中。使用文本编辑器打开该文件：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo vim /etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在文件末尾添加以下一行：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/swapfile swap swap defaults 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="8"&gt;
&lt;li&gt;调整 Swappiness 值（可选）：
&lt;code&gt;swappiness&lt;/code&gt; 参数控制内核使用 Swap 空间的积极程度。默认值通常是 60。对于服务器，你可能希望降低这个值，以便系统更倾向于使用物理内存，只有在必要时才使用 Swap 空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查看当前的 &lt;code&gt;swappiness&lt;/code&gt; 值：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cat /proc/sys/vm/swappiness
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;临时修改 &lt;code&gt;swappiness&lt;/code&gt; 值（例如设置为 10）：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo sysctl vm.swappiness=10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;永久修改 &lt;code&gt;swappiness&lt;/code&gt; 值，编辑 &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; 文件：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo nano /etc/sysctl.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在文件末尾添加或修改以下行：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;vm.swappiness=10
&lt;/code&gt;&lt;/pre&gt;&lt;h3 class="heading" id="停用swap空间"&gt;
 停用swap空间
 &lt;a class="anchor" href="#%e5%81%9c%e7%94%a8swap%e7%a9%ba%e9%97%b4"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;关闭 Swap 空间：
使用 &lt;code&gt;swapoff&lt;/code&gt; 命令关闭指定的 Swap 空间。如果你的 Swap 空间是基于文件的（如前面示例中的 &lt;code&gt;/swapfile&lt;/code&gt;），可以使用以下命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo swapoff /swapfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不确定 Swap 分区的路径，可以使用 &lt;code&gt;swapon --show&lt;/code&gt; 或 &lt;code&gt;free -h&lt;/code&gt; 命令查看。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;删除 Swap 文件（可选）：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo rm /swapfile
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="3"&gt;
&lt;li&gt;编辑 &lt;code&gt;/etc/fstab&lt;/code&gt; 文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了防止系统在重启后自动挂载 Swap 空间，需要从 &lt;code&gt;/etc/fstab&lt;/code&gt; 文件中删除或注释掉相关的条目。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo vim /etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;找到包含 &lt;code&gt;/swapfile&lt;/code&gt; 的那一行：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/swapfile swap swap defaults 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除这一行，或者在行首添加 &lt;code&gt;#&lt;/code&gt; 将其注释掉：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;#/swapfile swap swap defaults 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="4"&gt;
&lt;li&gt;验证 Swap 空间是否已停用：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 &lt;code&gt;free -h&lt;/code&gt; 命令验证 Swap 空间是否已停用：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;free -h
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>VPS基础安全配置实践指南</title><link>https://blog.yzyy.de/explore/%E6%9C%8D%E5%8A%A1%E5%99%A8/vps%E5%9F%BA%E6%9C%AC%E5%AE%89%E5%85%A8%E6%8E%AA%E6%96%BD/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/explore/%E6%9C%8D%E5%8A%A1%E5%99%A8/vps%E5%9F%BA%E6%9C%AC%E5%AE%89%E5%85%A8%E6%8E%AA%E6%96%BD/</guid><description>&lt;p&gt;本文基于 &lt;code&gt;@Raven95676&lt;/code&gt; 的原帖，并结合我的个人使用习惯进行了定制化整理，作为自己的操作备忘录。&lt;/p&gt;
&lt;p&gt;原帖地址：&lt;a href="https://linux.do/t/topic/267502"&gt;VPS基本安全措施&lt;/a&gt;&lt;/p&gt;
&lt;h1 class="heading" id="前言"&gt;
 前言
 &lt;a class="anchor" href="#%e5%89%8d%e8%a8%80"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;随着逐渐看到一些「Self Host」的服务，拥有一台属于自己的服务器的想法越来越强烈。终于，在24年的一次促销中，买到了第一台具有公网IP的小机器，1c1g。&lt;/p&gt;
&lt;p&gt;拿到了机器，开机之后意味着暴露在了互联网中。在互联网中，每时每刻都有无数的恶意流量发出。我们需要做什么呢？&lt;/p&gt;
&lt;p&gt;如果选择将网站 / 服务放在知名厂商虚拟主机上，虚拟主机的厂商会负责基本的服务器安全措施。但如果放在 VPS 上，那么你就是服务器的安全负责人了。更多的权限代表着更多的义务，VPS 在具有更高的自由度的情况下自然有更高的风险。&lt;strong&gt;而我们要做到的不是绝对安全，而是比大多数人安全。&lt;/strong&gt; 只要做到没那么容易被攻破那就是胜利。&lt;/p&gt;
&lt;h2 class="heading" id="安全管理系统"&gt;
 安全管理系统
 &lt;a class="anchor" href="#%e5%ae%89%e5%85%a8%e7%ae%a1%e7%90%86%e7%b3%bb%e7%bb%9f"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;有些 VPS 厂商默认提供的是 root 账户。众所周知，root 账户拥有整个系统最高的权限，这么高的权限自然是不安全的。正确的做法是创建一个非 root 账户，在必须使用 root 权限时使用 sudo 提权。&lt;/p&gt;
&lt;h3 class="heading" id="创建非-root-账户"&gt;
 创建非 root 账户
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e9%9d%9e-root-%e8%b4%a6%e6%88%b7"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;使用以下命令创建一个具有提权能力的账户：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;useradd -m -G sudo -s /bin/bash 用户名
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;useradd&lt;/code&gt;:&lt;/strong&gt; 这是一个用于创建新用户的命令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-m&lt;/code&gt;:&lt;/strong&gt; 此选项会在 &lt;code&gt;/home&lt;/code&gt; 目录下为新用户创建主目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-G sudo&lt;/code&gt;:&lt;/strong&gt; 此选项将新用户添加到 &lt;code&gt;sudo&lt;/code&gt; 组，允许其使用 &lt;code&gt;sudo&lt;/code&gt; 命令执行管理员操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-s /bin/bash&lt;/code&gt;:&lt;/strong&gt; 此选项指定新用户的默认 shell 为 &lt;code&gt;/bin/bash&lt;/code&gt;（常用 shell）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;用户名&lt;/code&gt;:&lt;/strong&gt; 这是你要创建的新用户的用户名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后我们给这个用户设置一个至少为 16 位的随机大小写字母 + 数字的密码：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-undefined" data-lang="undefined"&gt;passwd 用户名
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;建议把 root 用户的密码也改掉，云服务器的默认密码强度还是差点，而且有些服务商会通过邮件来发送默认密码，不太安全。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 class="heading" id="禁用-root-ssh-密码登陆"&gt;
 禁用 root SSH 密码登陆
 &lt;a class="anchor" href="#%e7%a6%81%e7%94%a8-root-ssh-%e5%af%86%e7%a0%81%e7%99%bb%e9%99%86"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;先不提 root 登录本身就是危险的行为，root 账户的用户名固定为”root”，如果允许其通过密码登录，攻击者只需进行密码穷举即可尝试攻破系统。之前我们已经创建了非 root 账户，在这里我们只需要禁用非 root 账户的 SSH 登录即可。&lt;/p&gt;
&lt;p&gt;执行以下命令编辑 SSH 配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo vim /etc/ssh/sshd_config
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进行如下设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 禁止 Root 用户通过密码远程登录 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;PermitRootLogin prohibit-password
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看&lt;code&gt;/etc/ssh/sshd_config.d/&lt;/code&gt;目录下有无其他配置文件，防止不生效。有些厂商的初始镜像内已经有了一些配置会覆盖掉我们编写的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ls /etc/ssh/sshd_config.d/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后重启 SSH 服务生效：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl restart ssh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为什么不设置成 no：&lt;/p&gt;
&lt;p&gt;庄 sir:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;另，直接禁掉 root 登录 &lt;code&gt;PermitRootLogin no&lt;/code&gt; 我也不常用，更习惯和其他 sudoer 一样配密钥然后禁止密码登录仅允许密钥登录。我是一般能操做线下集群的机子才会这么配，不然出个故障没 root 用不了了，比如存储满了远程 ssh session 都建立不了。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Oganneson:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理论上 PermitRootLogin 是好的，但在服务器寄掉需要救援时就会变麻烦，我其实更推荐只关闭远程密码登录，保留本地密码登录，出问题时可以通过 vnc 或者 ipmi 本地登录 root 进行救援。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 class="heading" id="修改-ssh-端口号"&gt;
 修改 SSH 端口号
 &lt;a class="anchor" href="#%e4%bf%ae%e6%94%b9-ssh-%e7%ab%af%e5%8f%a3%e5%8f%b7"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;登上去第一件事就是改 SSHD 的 端口并修改防火墙，22 全是猜密码的请求。&lt;br&gt;
有个小技巧，就是改端口并重启 sshd 后当前的连接并没有断，新建一个终端使用新端口发请求，能连上就是修改正确，要是不能建立新连接，还可以改回来，或查下防火墙的配置。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;正常情况下，直接通过 &lt;code&gt;sudo vim /etc/ssh/sshd_config&lt;/code&gt; 修改 SSH 端口，然后再使用 &lt;code&gt;sudo systemctl restart ssh.service&lt;/code&gt; 重启 SSH 服务应用更改是可行的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 设置 SSH端口 Port 自拟&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Port 20251
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是在 &lt;strong&gt;Ubuntu 22.10 或更高版本&lt;/strong&gt;中各位可能发现这是&lt;strong&gt;无效&lt;/strong&gt;的，各位会发现 SSH 服务在重启后依然监听原端口。&lt;/p&gt;
&lt;p&gt;因为在 Ubuntu 22.10 或更高版本中，ssh 默认通过套接字激活。&lt;/p&gt;
&lt;p&gt;在 Ubuntu 22.10、Ubuntu 23.04 和 Ubuntu 23.10 中进行修改的方法是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mkdir -p /etc/systemd/system/ssh.socket.d
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo vim /etc/systemd/system/ssh.socket.d/listen.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl daemon-reload
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl restart ssh.socket
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl restart ssh.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;listen.conf 的参考配置为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ini" data-lang="ini"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;[Socket]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ListenStream=
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ListenStream=&lt;span style="color:#666;font-style:italic"&gt;2233&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Ubuntu 24.04 中进行修改的方法是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo vim /etc/ssh/sshd_config
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl daemon-reload
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl restart ssh.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果不在乎通过套接字激活节省的内存，可以通过以下命令恢复到非套接字激活：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;警告：&lt;/strong&gt; 务必确认配置文件正常。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl disable --now ssh.socket
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl &lt;span style="font-weight:bold;font-style:italic"&gt;enable&lt;/span&gt; --now ssh.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如有配置迁移（Ubuntu 22.10 及以上，Ubuntu 24.04 以下）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl disable --now ssh.socket
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm -f /etc/systemd/system/ssh.service.d/00-socket.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm -f /etc/systemd/system/ssh.socket.d/addresses.conf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl daemon-reload
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl &lt;span style="font-weight:bold;font-style:italic"&gt;enable&lt;/span&gt; --now ssh.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class="heading" id="fail2ban-防暴力破解-ssh-配置ssh-ip白名单"&gt;
 Fail2ban 防暴力破解 SSH 配置SSH ip白名单
 &lt;a class="anchor" href="#fail2ban-%e9%98%b2%e6%9a%b4%e5%8a%9b%e7%a0%b4%e8%a7%a3-ssh-%e9%85%8d%e7%bd%aessh-ip%e7%99%bd%e5%90%8d%e5%8d%95"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;执行以下命令安装 Fail2ban：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install fail2ban
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完成后 Fail2ban会自动运行，可以检查一下服务状态&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl status fail2ban
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果为dead，注意开启fail2ban服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl start fail2ban
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;官方推荐的做法是利用 jail.local 来进行自定义设置：
这样做的好处是，在升级 Fail2ban 时，你的自定义配置不会丢失。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo vim /etc/fail2ban/jail.local
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以参照以下配置文件来进行自己的配置（记得删注释）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-ini" data-lang="ini"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="font-weight:bold;text-decoration:underline"&gt;[sshd]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ignoreip = &lt;span style="color:#666;font-style:italic"&gt;127.0.0.1/8 # 白名单，知道自己的固定公网ip网段可以配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;enabled = &lt;span style="color:#666;font-style:italic"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;filter = &lt;span style="color:#666;font-style:italic"&gt;sshd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;port = &lt;span style="color:#666;font-style:italic"&gt;22 # 端口，改了的话这里也要改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;maxretry = &lt;span style="color:#666;font-style:italic"&gt;5 # 最大尝试次数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;findtime = &lt;span style="color:#666;font-style:italic"&gt;300 # 多少秒以内最大尝试次数规则生效&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bantime = &lt;span style="color:#666;font-style:italic"&gt;600 # 封禁多少秒，-1是永久封禁（不建议永久封禁）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;action = &lt;span style="color:#666;font-style:italic"&gt;%(action_)s[port=&amp;#34;%(port)s&amp;#34;, protocol=&amp;#34;%(protocol)s&amp;#34;, logpath=&amp;#34;%(logpath)s&amp;#34;, chain=&amp;#34;%(chain)s&amp;#34;] # 不需要发邮件通知就这样设置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;banaction = &lt;span style="color:#666;font-style:italic"&gt;iptables-multiport # 禁用方式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;logpath = &lt;span style="color:#666;font-style:italic"&gt;/var/log/auth.log # SSH 登陆日志位置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;直接复制版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[sshd]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;ignoreip&lt;/span&gt; = 127.0.0.1/8
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;enabled&lt;/span&gt; = &lt;span style="font-weight:bold;font-style:italic"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;filter&lt;/span&gt; = sshd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;port&lt;/span&gt; = 20253
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;maxretry&lt;/span&gt; = 5 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;findtime&lt;/span&gt; = 300 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;bantime&lt;/span&gt; = 600
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;action&lt;/span&gt; = %(action_)s[&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;port&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;%(port)s&amp;#34;&lt;/span&gt;, &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;protocol&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;%(protocol)s&amp;#34;&lt;/span&gt;, &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;logpath&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;%(logpath)s&amp;#34;&lt;/span&gt;, &lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;chain&lt;/span&gt;=&lt;span style="color:#666;font-style:italic"&gt;&amp;#34;%(chain)s&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;banaction&lt;/span&gt; = iptables-multiport
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#666;font-weight:bold;font-style:italic"&gt;logpath&lt;/span&gt; = /var/log/auth.log
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置fail2ban开机自动启动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl &lt;span style="font-weight:bold;font-style:italic"&gt;enable&lt;/span&gt; fail2ban
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class="heading" id="使用密钥登录"&gt;
 使用密钥登录
 &lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e5%af%86%e9%92%a5%e7%99%bb%e5%bd%95"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如果 VPS 厂商提供了 SSH 密钥绑定功能，可以忽略本节内容并按照 VPS 厂商提供的方法绑定。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在本地 powershell 中运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ssh-keygen -t ed25519
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ssh-keygen -t rsa -b 4096
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;二者加密算法不同:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-b 4096&lt;/code&gt; 指定生成的 RSA 密钥的长度为 4096 位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ed25519 的密钥长度固定，约为 256 位，无需指定密钥长度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接使用默认的密钥路径即可。密码可以留空，也可以设置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Generating &lt;span style="font-weight:bold;text-decoration:underline"&gt;public&lt;/span&gt;/&lt;span style="font-weight:bold;text-decoration:underline"&gt;private&lt;/span&gt; ed25519 key pair.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Enter file in which to save the key (C:\Users\&amp;lt;user&amp;gt;/.ssh/id_ed25519): &lt;span style="color:#888;font-style:italic"&gt;# 直接回车
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;Enter passphrase (&lt;span style="font-weight:bold;text-decoration:underline"&gt;empty&lt;/span&gt; &lt;span style="font-weight:bold;text-decoration:underline"&gt;for&lt;/span&gt; no passphrase): &lt;span style="color:#888;font-style:italic"&gt;# 可以留空，也可以设置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;&lt;/span&gt;Enter same passphrase again: &lt;span style="color:#888;font-style:italic"&gt;# 和上一个一样
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们在 VPS 上编辑 SSH 授权密钥文件，注意需要在root用户和非root用户下都需要添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vim ~/.ssh/authorized_keys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;如果目标用户的家目录下还没有 &lt;code&gt;.ssh&lt;/code&gt; 目录， 确保目录的权限是 &lt;code&gt;700&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p ~/.ssh
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;chmod 700 ~/.ssh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建&lt;code&gt;authorized_keys&lt;/code&gt;文件并赋予相应权限&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;touch ~/.ssh/authorized_keys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;chmod 600 ~/.ssh/authorized_keys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后打开 &lt;code&gt;C:\\\Users&amp;lt;user\&amp;gt;/.ssh/id\_ed25519.pub&lt;/code&gt;，复制其内容并粘贴过去。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;执行以下命令编辑 SSH 配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo vim /etc/ssh/sshd_config
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进行如下设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;PubkeyAuthentication yes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;AuthorizedKeysFile .ssh/authorized_keys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;PasswordAuthentication no
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果发现没有生效：
检查 &lt;code&gt;/etc/ssh/sshd_config.d&lt;/code&gt;下的文件&lt;/p&gt;
&lt;p&gt;之后重启 SSH 服务生效：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo systemctl restart ssh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class="heading" id="启用-ufw-防火墙"&gt;
 启用 UFW 防火墙
 &lt;a class="anchor" href="#%e5%90%af%e7%94%a8-ufw-%e9%98%b2%e7%81%ab%e5%a2%99"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如果 VPS 厂商提供了防火墙功能，且没有复杂的需求，可以忽略本节内容并使用 VPS 厂商提供的防火墙。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在正式启用 UFW 之前，我们需要先设置规则。我们首先来设置 UFW 的默认行为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw default allow outgoing &lt;span style="color:#888;font-style:italic"&gt;# 默认允许所有数据出站&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw default deny incoming &lt;span style="color:#888;font-style:italic"&gt;# 默认禁止所有数据入站&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以通过以下命令查看 UFW 当前生效的规则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw status
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw status numbered &lt;span style="color:#888;font-style:italic"&gt;# 加上数字编号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以通过以下命令允许或拒绝某端口的传入 / 传出流量（部分以 22、80、443 端口为例）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 允许22端口的proto协议的流量入站&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw allow in 22/proto
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;#允许22端口的proto协议的流量出站&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw allow out 22/proto
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 在未指定in/out的情况下，默认为in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw allow 22/proto
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 在未指定proto的情况下，默认为tcp和udp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw allow 22
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 拒绝的话就把allow改成deny&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw deny 22
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 允许从start_port到end_port的端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw allow start_port:end_port
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 允许复数个端口，以英文逗号分隔&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw allow port1,port2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 允许来自于特定ip或cidr段的流量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw allow from ip/cidr
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 允许来自于特定ip或cidr段端口22的流量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw allow from ip/cidr to any port 22
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 允许来自于特定ip或cidr段端口22的tcp协议的流量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw allow from ip/cidr to any proto tcp port 22
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# 如果指定复数个端口，则必须指定协议&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw allow from ip to any proto tcp port 80,443
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#888;font-style:italic"&gt;# comment用于注释&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw allow from ip to any proto tcp port 80,443 comment &lt;span style="color:#666;font-style:italic"&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以通过以下命令删除生效的规则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw delete allow 22 &lt;span style="color:#888;font-style:italic"&gt;# 在规则前面加个delete&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw delete 1 &lt;span style="color:#888;font-style:italic"&gt;# 按照numbered的编号删除也行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在确定所有规则均成功设置后，通过以下命令启动 \ 关闭 \ 重启 UFW&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;启动防火墙前务必保证 22 端口（或者其他 SSH 端口）被放行。&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw enable|disable|reload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果需要重置规则，请使用：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重置规则前务必保证 UFW 处于关闭状态。&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ufw reset
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;本人建议仅放行正在使用的端口，比如 22、80、443。&lt;/p&gt;
&lt;p&gt;默认情况下，UFW 仅记录不符合规则的被拒绝的数据包。如果需要记录与该服务相关的每个详细信息，可以在 allow 后加上 log 以进行记录。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;# 成功连接 ssh 的也记一下日志备查比较好 ufw allow log 22/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;h2 class="heading" id="更改时区"&gt;
 更改时区
 &lt;a class="anchor" href="#%e6%9b%b4%e6%94%b9%e6%97%b6%e5%8c%ba"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo timedatectl set-timezone Asia/Shanghai
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 class="heading" id="保证软件更新"&gt;
 保证软件更新
 &lt;a class="anchor" href="#%e4%bf%9d%e8%af%81%e8%bd%af%e4%bb%b6%e6%9b%b4%e6%96%b0"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 class="heading" id="日常更新系统"&gt;
 日常更新系统
 &lt;a class="anchor" href="#%e6%97%a5%e5%b8%b8%e6%9b%b4%e6%96%b0%e7%b3%bb%e7%bb%9f"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;个人建议定期登录 VPS 运行 &lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&lt;/code&gt; 来保证 VPS 内所有软件包均为最新。&lt;/p&gt;
&lt;p&gt;不过 Ubuntu 默认会每天自动安装系统的安全更新，所以说这个频率没必要太勤。&lt;/p&gt;</description></item><item><title>论在网吧登录 Steam 的正确姿势</title><link>https://blog.yzyy.de/post/%E8%AE%BA%E5%9C%A8%E7%BD%91%E5%90%A7%E7%99%BB%E5%BD%95-steam-%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</link><pubDate>Wed, 06 Mar 2024 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/post/%E8%AE%BA%E5%9C%A8%E7%BD%91%E5%90%A7%E7%99%BB%E5%BD%95-steam-%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</guid><description>&lt;p&gt;说到在网吧登录 Steam 的正确姿势，那就是不要在网吧尝试以任何方式登录 Steam。不是我杞人忧天，实在是血淋淋的教训太多了，请看：












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="IMG_7817" src="https://webp.050612.xyz/2025/07/IMG_7817.jpeg" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这些案例中既有使用账号密码登录的，也有使用手机令牌扫码登录的。&lt;/p&gt;
&lt;p&gt;是的🤗，只要你有库存，第二天 Steam 都可能会给你一个 &amp;ldquo;惊喜&amp;rdquo; 发钱！但这可不是 Steam 大发慈悲，而是在通知你：兄弟，你的号被盗了…😮












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="IMG_7823" src="https://webp.050612.xyz/2025/07/IMG_7823.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;













&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="IMG_7822" src="https://webp.050612.xyz/2025/07/IMG_7822.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;什么样的账号最容易被盗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般来说，盗号贼的目的是为了盗库存、网游开挂。&lt;br&gt;
如果号中有以下因素会增加被盗风险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSGO、趴不寄、永劫等一些网游&lt;/li&gt;
&lt;li&gt;高价值库存&lt;/li&gt;
&lt;li&gt;集换式卡牌、闪卡等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;俗话说，光脚的不怕穿鞋的，像我的 Steam 号库存一贫如洗🤦‍♂️，反而可以在网吧为所欲为…&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;“但我就是想在网吧玩啊，咋整？”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;凡事没有绝对。&lt;/p&gt;
&lt;p&gt;假如你也像上位佬友一样，家里电脑配置不够，不能爽完一些 3A，或者和以前的老同学临时起意相约网吧开黑，在这里分享一个相对来说保险的方法。&lt;/p&gt;
&lt;p&gt;那就是 Steam 家庭共享大法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建个空白小号（就当给自己养了个 Steam 二胎）&lt;/li&gt;
&lt;li&gt;把小号以儿童身份加入大号的家庭组（认个干儿子）&lt;/li&gt;
&lt;li&gt;平时把小号游玩权限全关（让熊孩子老实点）&lt;/li&gt;
&lt;li&gt;网吧只登录小号，打完了及时锁定小号（让熊孩子去冒险）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样有两个好处，一是大部分 3A 都支持家庭共享，二是小号拿来玩一些免费网游也可以。&lt;/p&gt;
&lt;p&gt;唯一的风险就是，真有人不长眼地把你小号也给盗了，玩网游开挂会导致大号一起连坐封禁。🙄&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;“我就非要登录咋办？”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果假设你选择了一家口碑良好、连锁品牌的高端网咖，并且坚定地选择相信他，那么也需要注意，做到这些会更加保险。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果你的电脑是开着的，那么一定要重启电脑，触发网吧的恢复程序，防止上一位 下毒；&lt;/li&gt;
&lt;li&gt;重新官网下载 Steam 客户端，不要用网吧预装好的 Steam；&lt;/li&gt;
&lt;li&gt;绑定手机令牌且通过手机令牌扫码登陆，不要手动输入帐号密码；&lt;/li&gt;
&lt;li&gt;登陆后选择不把登陆凭证保存到本地计算机；&lt;/li&gt;
&lt;li&gt;下机前主动登出 Steam，并确认不能免凭证登陆；&lt;/li&gt;
&lt;li&gt;手机令牌在已授权凭证中清除在网吧的登陆凭证。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;万一真被盗了你又不愿意咋办？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后再说说在你及时发现了 steam 给你发钱的时候（被盗的时候），补救措施：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;转载小黑盒












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="IMG_7824" src="https://webp.050612.xyz/2025/07/IMG_7824.jpeg" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;













&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="IMG_7825" src="https://webp.050612.xyz/2025/07/IMG_7825.jpeg" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;













&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="IMG_7826" src="https://webp.050612.xyz/2025/07/IMG_7826.jpeg" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;













&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="IMG_7827" src="https://webp.050612.xyz/2025/07/IMG_7827.jpeg" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>图床搭建(Cloudflare R2 + WebP Cloud + PicList)</title><link>https://blog.yzyy.de/explore/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</link><pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/explore/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</guid><description>&lt;h2 class="heading" id="前言"&gt;
 前言
 &lt;a class="anchor" href="#%e5%89%8d%e8%a8%80"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;本篇基于&lt;a href="https://www.pseudoyu.com/zh/2024/06/30/free_image_hosting_system_using_r2_webp_cloud_and_picgo/"&gt;从零开始搭建你的免费图床系统（Cloudflare R2 + WebP Cloud + PicGo） · Pseudoyu&lt;/a&gt;教程书写，根据自己的习惯以及相关工具的迭代更新所书写。&lt;/p&gt;
&lt;p&gt;本篇是关于图床系统的解决方案。&lt;/p&gt;
&lt;p&gt;有搭建图床的念头是因为通过Web插件经常clip精品文章，在这些文章中有大量外链图片，或许哪一天挂了就会出问题。最近又部署了个人博客，搭建一个图床系统迫在眉睫。&lt;/p&gt;
&lt;h3 class="heading" id="cloudflare-r2--webp-cloud--picgo"&gt;
 Cloudflare R2 + WebP Cloud + PicGo
 &lt;a class="anchor" href="#cloudflare-r2--webp-cloud--picgo"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716103644466.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;早就听过Cloudflare的R2对象存储服务，还有B2（Backblaze）什么的。&lt;/p&gt;
&lt;p&gt;赛博菩萨 Cloudflare 提供的 R2 对象存储这一服务，免费计划中有每月 10 GB 的存储容量，对于个人使用来说完全够用，大厂的服务与数据安全也有保障。&lt;/p&gt;
&lt;p&gt;为了优化用户的访问，又使用了一个「&lt;a href="https://webp.se/"&gt;WebP Cloud&lt;/a&gt;」服务对 R2 的图片进行代理，在代理层面进一步减小图片体积，虽然对于国内用户来说速度肯定还是比不上阿里云 OSS 这种线路，但是在不用备案、稳定且免费的综合条件下，这是我能想到的最好的方案了。&lt;/p&gt;
&lt;p&gt;在电脑端同样是通过 PicGo 客户端几乎一键上传并生成博客直接可用的 markdown 图片链接，配置完成后使用起来很顺滑。&lt;/p&gt;
&lt;h2 class="heading" id="图床搭建说明"&gt;
 图床搭建说明
 &lt;a class="anchor" href="#%e5%9b%be%e5%ba%8a%e6%90%ad%e5%bb%ba%e8%af%b4%e6%98%8e"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Cloudflare R2 + WebP Cloud + PicGo 的方案尽管牵扯到了多个组件和平台，但所有操作都在 Free Plan 中，也是我最终选定的方案，下面将从零开始介绍如何搭建这个免费图床系统。&lt;/p&gt;
&lt;h3 class="heading" id="cloudflare-r2"&gt;
 Cloudflare R2
 &lt;a class="anchor" href="#cloudflare-r2"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;R2 是 Cloudflare 推出的免费对象存储服务，需要免费注册一个 &lt;a href="https://www.cloudflare.com/zh-cn/"&gt;Cloudflare 账号&lt;/a&gt;才能使用，注册登录后，点击左侧边栏的 R2 访问服务，但需要注意的是开通 R2 服务需要绑定信用卡（国内外主流信用卡皆可），但并不会扣费，主要是为了验证用户身份使用。&lt;/p&gt;
&lt;h4 class="heading" id="创建图床-bucket"&gt;
 创建图床 Bucket
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e5%9b%be%e5%ba%8a-bucket"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716103957488.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;开通 R2 服务后，点击右上角「创建存储桶」按钮进行创建。&lt;/p&gt;
&lt;p&gt;进入创建配置界面后，需要填写存储桶（Bucket）名称，建议有一些辨识度，后续在配置上传时会用到。&lt;/p&gt;
&lt;p&gt;位置则选择「自动」，但可以额外多配置一个位置提示，由于我后续还将使用「&lt;a href="https://webp.se/"&gt;WebP Cloud&lt;/a&gt;」服务的美西机房进行图片代理优化，所以在此处选择的是「北美洲西部（WNAM）」，根据需求选其他区域也可以，但 Cloudflare 并不保证一定会分配到所指定的区域。&lt;/p&gt;
&lt;p&gt;点击「创建存储桶」按钮即完成创建，此时我们已经可以向我们的存储桶上传文件了，可以选择在网页直接上传文件或文件夹。&lt;/p&gt;
&lt;p&gt;也可以使用 S3 API 进行上传，我们后续使用 PicGo 客户端进行上传就依赖这种方式，但需要进行一些额外配置，点击导航栏「设置」选项进行配置。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716104739846.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;首先我们需要打开「R2.dev 子域」，这是为了后续访问图片时需要的公网地址，点击「允许访问」，并按照提示输入「allow」即可开启。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716104806788.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;完成后会显示一个以 &lt;code&gt;r2.dev&lt;/code&gt; 结尾的公网网址，即我们后续访问图片的网址。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716104823644.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 class="heading" id="自定义图床域名可选"&gt;
 自定义图床域名（可选）
 &lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e5%9b%be%e5%ba%8a%e5%9f%9f%e5%90%8d%e5%8f%af%e9%80%89"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;但是分配的网址比较长，不易于记忆，我们可以通过「自定义域」来绑定我们的专属域名，点击「连接域」按钮。&lt;/p&gt;
&lt;p&gt;输入自己想绑定的域名，点击继续。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716104920972.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716104954128.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;连接域，并等待 DNS 解析生效即可。&lt;/p&gt;
&lt;p&gt;完成后 bucket 状态处「公共 URL 访问」显示“已允许”，且「域」显示为我们刚自定义的域名即配置成功。&lt;/p&gt;
&lt;h4 class="heading" id="配置-bucket-访问-api"&gt;
 配置 Bucket 访问 API
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae-bucket-%e8%ae%bf%e9%97%ae-api"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;每次都要打开 Cloudflare 页面手动上传图片的方式显然不够便捷。R2 提供了 S3 兼容的 API，可以方便地使用一些客户端/命令行工具进行上传、删除等操作。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716105046500.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;回到 R2 主页面，点击右上角「管理 R2 API 令牌」，进入后点击「创建 API 令牌」。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716105230904.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;输入令牌名称，「权限」选择“对象读和写”并将此 API 指定之前所创建的 Bucket，这样最小化权限也保障数据安全，其余选项保持默认即可。&lt;/p&gt;
&lt;p&gt;完成创建后会显示所有密钥，我们使用 PicGo 需要的是下面三个信息，不过因为只会显示一次，建议在密码管理软件或其他地方妥善保管好这些参数信息。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716105529633.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;至此，我们需要在 Cloudflare R2 上配置的部分就完成了，接下来我们需要配置 PicGo 客户端。&lt;/p&gt;
&lt;h3 class="heading" id="picgo-piclist"&gt;
 PicGo-&amp;gt;PicList
 &lt;a class="anchor" href="#picgo-piclist"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;PicGo 是一个用于快速上传并获取图片 URL 的工具软件，有着较为丰富的插件生态，支持多种图床服务，其 GitHub 仓库为「&lt;a href="https://github.com/Molunerfinn/PicGo"&gt;GitHub - Molunerfinn/PicGo&lt;/a&gt;」，可以下载对应平台客户端使用。&lt;/p&gt;
&lt;p&gt;我的主要需求是配合Obsidian使用，在配置Obsidian的「Image auto upload」插件时，发现了PicGo的二开项目：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Kuingsmile/PicList"&gt;GitHub - Kuingsmile/PicList&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相较于PicGo：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持第二图床同步上传&lt;/li&gt;
&lt;li&gt;支持通过API实现云端删除&lt;/li&gt;
&lt;li&gt;内置图床额外添加了WebDav、本地图床和SFTP等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体请自行查看&lt;a href="https://github.com/Kuingsmile/PicList/blob/dev/README_cn.md#%E7%89%B9%E8%89%B2%E5%8A%9F%E8%83%BD"&gt;PicList特色功能&lt;/a&gt;&lt;/p&gt;
&lt;h4 class="heading" id="配置-r2-图床"&gt;
 配置 R2 图床
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae-r2-%e5%9b%be%e5%ba%8a"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;PicGo 本体并不包括 S3 图床，但可以通过「&lt;a href="https://github.com/wayjam/picgo-plugin-s3"&gt;GitHub - wayjam/picgo-plugin-s3&lt;/a&gt;」插件来支持。&lt;/p&gt;
&lt;p&gt;如果出现安装转圈，可以尝试手动安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;C:\Users\user\AppData\Roaming\picgo&lt;/code&gt;打开终端。&lt;/li&gt;
&lt;li&gt;运行&lt;code&gt;npm install picgo-plugin-s3&lt;/code&gt;,观察是否有报错，等待完成后重启picgo即可发现在多了一个Amazon S3的图床设置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;出现问题的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装过程中出现了报错，很有可能是nodejs版本过低的原因。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="node版本要求" src="https://webp.050612.xyz/2025/02/20250205232413441.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在「插件设置」中选择安装，「图床设置」中就新增了 Amazon S3 选项。点击进入配置选项。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PicList












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716105923081.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有几项配置需要尤其注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用密钥 ID&lt;/strong&gt;，填写 R2 API 中的 Access Key ID（访问密钥 ID）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用密钥&lt;/strong&gt;，填写 R2 API 中的 Secret Access Key（机密访问密钥）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;桶名&lt;/strong&gt;，填写 R2 中创建的 Bucket 名称&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件路径&lt;/strong&gt;，上传到 R2 中的文件路径，我选择使用 &lt;code&gt;{year}/{month}/{fullName}&lt;/code&gt; 来初步分文件夹并保留原文件的文件名和扩展名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义节点&lt;/strong&gt;，填写 R2 API 中的「为 S3 客户端使用管辖权地特定的终结点」，即 &lt;code&gt;xxx.r2.cloudflarestorage.com&lt;/code&gt; 格式的 S3 Endpoint&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义输出URL模板&lt;/strong&gt;，如果在创建R2时使用了自定义域，需要修改此项，并且注意要和&amp;lt;文件路径&amp;gt;一项对应，先上传一张图片，去cf查看图片链接，获得生成逻辑再进行相应填写。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;占位符详情请查看：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/wayjam/picgo-plugin-s3"&gt;GitHub - wayjam/picgo-plugin-s3: PicGo S3 插件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他配置保持默认即可，确认参数无误后点击「确定」与「设置为默认图床」即可。&lt;/p&gt;
&lt;h4 class="heading" id="图片上传"&gt;
 图片上传
 &lt;a class="anchor" href="#%e5%9b%be%e7%89%87%e4%b8%8a%e4%bc%a0"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="20250716110818243" src="https://webp.050612.xyz/2025/07/20250716110818243.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;完成上述配置后，我们就可以在「上传区」直接拖入文件进行图片上传了，如上传后显示无误则为配置成功，生成的链接会自动在系统剪贴板中，直接在需要的地方粘贴即可。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="20250716110939261" src="https://webp.050612.xyz/2025/07/20250716110939261.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;并且可以在链接格式处选择对应格式，如 URL 或是博客可用的 Markdown 格式链接等。这里我还做了一个小的配置，在左侧「PicGo 设置」 - 「自定义链接格式」中修改为 &lt;code&gt;![$fileName]($url)&lt;/code&gt;，并在上传区的链接格式处选择了「Custom」，这样我上传后就会根据文件名生成以文件名为 Alt 文本的 Markdown 图片链接。&lt;/p&gt;
&lt;h3 class="heading" id="webp-cloud-图片优化"&gt;
 WebP Cloud 图片优化
 &lt;a class="anchor" href="#webp-cloud-%e5%9b%be%e7%89%87%e4%bc%98%e5%8c%96"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;至此我们已经完成了整个图床的搭建、配置和上传，但通常我们本地截图或是相机拍摄的图片体积较大，对于访客来说加载时间会较长，并不直接适合互联网发布。&lt;/p&gt;
&lt;p&gt;这次更换图床方案后也开始寻找更智能的图片优化服务，想到了「&lt;a href="https://webp.se/"&gt;WebP Cloud&lt;/a&gt;」。
打开了官网「&lt;a href="https://webp.se/"&gt;webp.se&lt;/a&gt;」看了一下更为详细的介绍。&lt;/p&gt;
&lt;p&gt;简单来说这是一个类 CDN 的图片代理 SaaS 服务，可以在几乎不改变画质的情况下大幅缩小图片体积，加快整体站点加载速度。发展到现在除了图片体积减少外，还提供了缓存、添加水印、图片滤镜等更多实用的功能，并提供了自定义 Header 等配置选项。&lt;/p&gt;
&lt;p&gt;看了一圈，觉得能很好满足我的博客图片优化需求，开始折腾配置。&lt;/p&gt;
&lt;h4 class="heading" id="配置-webp-cloud"&gt;
 配置 WebP Cloud
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae-webp-cloud"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;首先通过 GitHub 授权登录 &lt;a href="https://dashboard.webp.se/"&gt;WebP Cloud&lt;/a&gt; 平台。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716111504411.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;页面非常直观，主要显示了当前 Plan 下的 Free Quota 和额外 Quota 的数据，以及一些用量统计。&lt;/p&gt;
&lt;p&gt;点击「Create Proxy」按钮可以添加配置。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716111814390.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了优化国内访问，我「Proxy Region」选择的是美西「Hillsboro, OR」区域&lt;/li&gt;
&lt;li&gt;「Proxy Name」填写一个自定义名称即可&lt;/li&gt;
&lt;li&gt;「Proxy Origin URL」，比较重要，需要填写上文我们配置好的 R2 自定义域名，如我填写的是 &lt;code&gt;image.yzyy.de&lt;/code&gt;，如果没配置自定义域名则填写 R2 提供的 &lt;code&gt;xxx.r2.dev&lt;/code&gt; 格式的域名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716112113344.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图中 Basic info 部分「Visitor」下显示的以 &lt;code&gt;xxx.webp.li&lt;/code&gt; 格式即为我们的代理地址。&lt;/p&gt;
&lt;h5 class="heading" id="自定义域名"&gt;
 自定义域名
 &lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e5%9f%9f%e5%90%8d"&gt;#&lt;/a&gt;
&lt;/h5&gt;
&lt;p&gt;支持了自定义配置域名，详细教程可参考「&lt;a href="https://docs.webp.se/webp-cloud/custom-domain/"&gt;Custom Domain | WebP Cloud Services Docs&lt;/a&gt;」。&lt;/p&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="添加域名解析" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250206175133.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 class="heading" id="更改-picgo-配置"&gt;
 更改 PicGo 配置
 &lt;a class="anchor" href="#%e6%9b%b4%e6%94%b9-picgo-%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="change_pic_go_config" src="https://webp.050612.xyz/2025/02/change_pic_go_config.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;需要注意的是，由于我们最终需要放在博客中的图片是经过 WebP Cloud 代理过的链接，所以需要回到 PicGo 的「图床设置」中，将「自定义域名」改为我们刚配置的 WebP Cloud 代理地址，即格式为 &lt;code&gt;xxx.webp.li&lt;/code&gt; 的代理链接或其他自定义域名。&lt;/p&gt;
&lt;h4 class="heading" id="webp-cloud-用量"&gt;
 WebP Cloud 用量
 &lt;a class="anchor" href="#webp-cloud-%e7%94%a8%e9%87%8f"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;免费用户每天有 2000 Free Quota，即能够代理 2000 次图片访问请求，并提供 100M 的图片缓存，对于一般用户来说完全够用，如有一些流量较大的特定时期也可以购买额外 Quota，价格很便宜。&lt;/p&gt;
&lt;p&gt;如超过了 Quota，访问则会被 301 转发到源站图片地址，不经 WebP Cloud 服务压缩，但依然可用；超过 100M 的缓存则会按照 LRU 算法清理，所以依然能够保障一些高频请求的图片能够有较好的访问体验。&lt;/p&gt;
&lt;h2 class="heading" id="备用方案"&gt;
 备用方案
 &lt;a class="anchor" href="#%e5%a4%87%e7%94%a8%e6%96%b9%e6%a1%88"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;tg方案&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://github.com/x-dr/telegraph-Image"&gt;GitHub - x-dr/telegraph-Image&lt;/a&gt;&lt;/p&gt;
&lt;h2 class="heading" id="与obsidian集成"&gt;
 与Obsidian集成
 &lt;a class="anchor" href="#%e4%b8%8eobsidian%e9%9b%86%e6%88%90"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;如果使用的是 &lt;a href="https://obsidian.md/"&gt;obsidian&lt;/a&gt; 进行博客写作，推荐将 Picgo 与 obsidian &lt;a href="https://github.com/renmu123/obsidian-image-auto-upload-plugin"&gt;Image Auto Upload Plugin&lt;/a&gt; 插件结合使用，这样可以一键上传文章中所有图片。&lt;/p&gt;</description></item><item><title>Obsdian的一些使用技巧</title><link>https://blog.yzyy.de/explore/obsidian%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link><pubDate>Sun, 08 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/explore/obsidian%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid><description>&lt;h2 class="heading" id="快捷操作"&gt;
 快捷操作
 &lt;a class="anchor" href="#%e5%bf%ab%e6%8d%b7%e6%93%8d%e4%bd%9c"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;[[&lt;/code&gt;键入两个中括号迅速添加外链&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class="heading" id="插件"&gt;
 插件
 &lt;a class="anchor" href="#%e6%8f%92%e4%bb%b6"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;该部分记录一些优秀的插件的使用方式&lt;/p&gt;
&lt;h3 class="heading" id="templater高度自定义模板"&gt;
 &lt;code&gt;Templater&lt;/code&gt;(高度自定义模板)
 &lt;a class="anchor" href="#templater%e9%ab%98%e5%ba%a6%e8%87%aa%e5%ae%9a%e4%b9%89%e6%a8%a1%e6%9d%bf"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALT + E&lt;/code&gt; 快速插入模板&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class="heading" id="auto-link-title自动获取url标题"&gt;
 Auto-Link-Title(自动获取url标题)
 &lt;a class="anchor" href="#auto-link-title%e8%87%aa%e5%8a%a8%e8%8e%b7%e5%8f%96url%e6%a0%87%e9%a2%98"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;设置：可以设置网页黑名单，让一些链接不触发。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="Auto-Link-Title" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250111180404.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl+shift+e&lt;/code&gt; 增强现有的链接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class="heading" id="automatic-table-of-contents"&gt;
 Automatic Table of contents
 &lt;a class="anchor" href="#automatic-table-of-contents"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;生成目录，可供导出PDF时使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用方式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;```table-of-contents
option1: value1
option2: value2
```
&lt;/code&gt;&lt;/pre&gt;&lt;h3 class="heading" id="auto-card-link"&gt;
 Auto Card Link
 &lt;a class="anchor" href="#auto-card-link"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Auto Card Link 插件主要提供以下几个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;粘贴增强&lt;/strong&gt;：直接粘贴复制的链接时，自动转换成卡片式链接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选中链接增强&lt;/strong&gt;：对已选中的链接进行增强，转换成卡片式显示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;默认粘贴设置&lt;/strong&gt;：可以设置默认粘贴行为，以自动增强链接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本地图片支持&lt;/strong&gt;：通过内部链接支持本地图片显示（例如：&lt;code&gt;image: &amp;quot;[[image.png]]&amp;quot;&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 class="heading" id="cardlink语法"&gt;
 &lt;code&gt;cardlink&lt;/code&gt; 语法
 &lt;a class="anchor" href="#cardlink%e8%af%ad%e6%b3%95"&gt;#&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;插件使用 &lt;code&gt;cardlink&lt;/code&gt; 代码块来展示卡片式链接，内部采用 YAML 语法。下面是支持的属性列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; (必需)：点击链接时打开的 URL 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; (必需)：链接的标题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;description&lt;/strong&gt; (可选)：链接的描述信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;host&lt;/strong&gt; (可选)：链接的主机名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;favicon&lt;/strong&gt; (可选)：链接的网站图标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;image&lt;/strong&gt; (可选)：在卡片链接中显示的缩略图。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，在默认情况下这些信息全部都是自动抓取的，无需手动填充。&lt;/p&gt;</description></item><item><title>Obsdian个人配置记录</title><link>https://blog.yzyy.de/explore/obsidian%E4%B8%AA%E4%BA%BA%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</link><pubDate>Fri, 06 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/explore/obsidian%E4%B8%AA%E4%BA%BA%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</guid><description>&lt;p&gt;&lt;strong&gt;Hello, Obsidian.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 class="heading" id="obsidian应用设置"&gt;
 Obsidian应用设置
 &lt;a class="anchor" href="#obsidian%e5%ba%94%e7%94%a8%e8%ae%be%e7%bd%ae"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;参考&lt;a href="https://blog.goalonez.site/blog/Obsidian%E6%8A%98%E8%85%BE%E4%B9%8B%E8%B7%AF.html"&gt;Obsidian折腾之路 | Goalonez Blog&lt;/a&gt;中设置部分，并做出一些个性化设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器
&lt;ul&gt;
&lt;li&gt;新标签页默认视图-编辑模式&lt;/li&gt;
&lt;li&gt;显示行号-打开&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外观
&lt;ul&gt;
&lt;li&gt;主题-Border
&lt;ul&gt;
&lt;li&gt;Border是一款比较简洁的主题，看起来比较舒服。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;插件
&lt;ul&gt;
&lt;li&gt;Better Export PDF
支持自定义页眉页脚，导出的目录带链接， PDF带目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class="heading" id="备份与同步"&gt;
 备份与同步
 &lt;a class="anchor" href="#%e5%a4%87%e4%bb%bd%e4%b8%8e%e5%90%8c%e6%ad%a5"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;我的设备是Windows + iPhone，最终选择了iCloud同步，Git备份。&lt;/p&gt;
&lt;h3 class="heading" id="同步"&gt;
 同步
 &lt;a class="anchor" href="#%e5%90%8c%e6%ad%a5"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;推荐先完成ios设备上的操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载Obsidian，点击「Create new vault」创建数据库，输入数据库名称&lt;/li&gt;
&lt;li&gt;点击「Store in iCloud」，Obsidian将会在 iCloud 创建属于它的系统文件夹。&lt;strong&gt;这一步很关键&lt;/strong&gt;，因为在ios设备上，Obsidian无法自己手动选择文件夹。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows上的操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装旧版本的icloud：
我选择了7.x版本，但是官网上已经不提供了，现有官方渠道只有Microsoft Store上的最新版。
最终，相对安全的火绒应用商店提供的iCloud就是7.x版本，可以自行下载。分享个115网盘的链接：&lt;a href="https://115.com/s/swhyhnn33z6?password=6969&amp;amp;#iCloud7x.exe"&gt;icloud.7x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;icloud勾选icloud云盘，在资源管理器就可以看到iCloud Drive目录。&lt;/li&gt;
&lt;li&gt;打开Obsidian，使用本地目录，选择iCloudDrive目录中的 Obsidian目录就大功告成了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要注意的是：旧版icloud不支持更换文件目录，默认文件目录在C:\Users\xx下。icloud云盘中文件较多的慎用。或许可以采用目录映射的方式将该文件夹映射到其他目录，我文件不多就不折腾了，在这只是提供一种解决思路。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到目前为止：iPhone和Pc已经可以无感同步了，而且响应很快，不说做到毫秒级，5s以内可以做到。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class="heading" id="备份"&gt;
 备份
 &lt;a class="anchor" href="#%e5%a4%87%e4%bb%bd"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在obsidian仓库目录下初始化git仓库、初始提交、建立分支、推送到远程&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-git" data-lang="git"&gt;git init
git add ./*
git commit -m &amp;#34;initial&amp;#34;
git branch -M main
git remote add origin https://xxx
git push -u origin mian
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装第三方插件Git，Obsidian Git已经改名为Git，以下是git插件相关设置以及机翻汉化。由于我只需要使用git进行备份，以下设置可以实现每30min自动commit并push到github。












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="e87f9679dc6bfe6b20580b775baab0f3" src="https://webp.050612.xyz/2025/02/e87f9679dc6bfe6b20580b775baab0f3.jpg" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class="heading" id="结束"&gt;
 结束
 &lt;a class="anchor" href="#%e7%bb%93%e6%9d%9f"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;至此，已经完成了Obsidian的初始化配置，同时也完成我的第一篇在Obsidian上书写的文档。目前也就安装了git、RecentFiles两个插件，其他的等以后需要再去发掘吧。
希望我的折腾不仅限于折腾，通过接触新工具养成记录的好习惯，而不是只想而不去做。&lt;/p&gt;
&lt;h2 class="heading" id="备用方案"&gt;
 备用方案
 &lt;a class="anchor" href="#%e5%a4%87%e7%94%a8%e6%96%b9%e6%a1%88"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;目前使用旧版7.x版本icloud方式运行良好，但还是在折腾的过程中寻找了一些&lt;strong&gt;备用方案&lt;/strong&gt;：&lt;/p&gt;
&lt;h3 class="heading" id="使用新版icloudfreefilesync中转同步方案"&gt;
 使用新版icloud+FreeFileSync中转同步方案
 &lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%96%b0%e7%89%88icloudfreefilesync%e4%b8%ad%e8%bd%ac%e5%90%8c%e6%ad%a5%e6%96%b9%e6%a1%88"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;原理是由于文件频繁的被修改，新版icloud判断有误会产生很多同名带括号的备份文件，为了解决频繁修改文件的问题，使用FreeFileSync软件在iCloud同步文件夹和其他位置的一个文件夹创建链接，并定时同步。pc的Obsidian使用其他位置的一个文件夹作为Obsidian仓库。&lt;/p&gt;
&lt;p&gt;由于没有实践，不知道有没有解决pc和ios同步不及时的问题。
参考教程：&lt;a href="https://zhuanlan.zhihu.com/p/459147364"&gt;obsidian好用的icloud同步方案 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;h3 class="heading" id="使用新版icloud使用佬手搓程序中转同步"&gt;
 使用新版iCloud+使用佬手搓程序中转同步
 &lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%96%b0%e7%89%88icloud%e4%bd%bf%e7%94%a8%e4%bd%ac%e6%89%8b%e6%90%93%e7%a8%8b%e5%ba%8f%e4%b8%ad%e8%bd%ac%e5%90%8c%e6%ad%a5"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;原理同上。&lt;/p&gt;
&lt;p&gt;参考教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/447787943"&gt;obsidian笔记同步方案设计思路 - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/447963514"&gt;obsidian笔记同步保姆级教程 - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class="heading" id="使用-remotely-save插件--webdavonedrives3dropbox"&gt;
 使用 Remotely-Save插件 + WebDav/OneDrive/S3/DropBox
 &lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8-remotely-save%e6%8f%92%e4%bb%b6--webdavonedrives3dropbox"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;原理是利用一些网盘服务商提供的WebDav协议接口或者是网盘官方提供的同步服务和Obsidian的第三方插件Remotely-Save联动进行同步。&lt;/p&gt;
&lt;p&gt;参考教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日本的一家支持webdav协议的网盘服务商&lt;a href="https://zhuanlan.zhihu.com/p/642725009"&gt;InfiniCLOUD（原TeraCLOUD）以及静读天下webdav同步 - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://infini-cloud.net/en/clients.html"&gt;Apps|InfiniCLOUD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;国内有坚果云，付费服务的阿里云盘&lt;/li&gt;
&lt;li&gt;使用alist自建webdav&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.goalonez.site/blog/Obsidian%E6%8A%98%E8%85%BE%E4%B9%8B%E8%B7%AF.html"&gt;Obsidian折腾之路 | Goalonez Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/565999467"&gt;Obsidian同步！Windows与iOS双向同步解决方案（解决提示需要合并、根目录出现出现大量同名文件等） - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neevop.com/blog/obsidian_icloud_sync/"&gt;obsidian利用iCloud实现全平台同步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/weixin_44370439/article/details/143572683"&gt;Obsidian的Git插件设置配置全流程 &amp;ndash; 简单的电脑端多平台同步方案及常见问题_obsidian git插件-CSDN博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/weixin_44370439/article/details/143489237?fromshare=blogdetail&amp;amp;sharetype=blogdetail&amp;amp;sharerId=143489237&amp;amp;sharerefer=PC&amp;amp;sharesource=weixin_44370439&amp;amp;sharefrom=from_link"&gt;Obsidian 插件安装教程_obsidian插件怎么安装-CSDN博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Hello, Typo!</title><link>https://blog.yzyy.de/post/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link><pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/post/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid><description>&lt;p&gt;一切都源于在论坛上看到了一个简洁的博客主题，一个以内容为上的博客主题。看到的那一刻就默默在笔记上记下了一个TODO: 搭建一个博客。&lt;/p&gt;
&lt;p&gt;在看到typo之前，没想过搭建一个个人博客，想着有一个本地化的笔记内容已经够了。加上在网上冲浪，看到的无数个已经被遗忘在互联网的角落里蒙灰的博客。我想，凭我的精力很难一直有内容产出。所以我的博客计划搁置了一段时间。&lt;/p&gt;
&lt;p&gt;但我后来想了想，正是这些蒙灰的博客，才真的帮到过我。可能内容简单，甚至有些简陋，但偏偏就是他们记录下了某个冷门问题的解决过程，或者某一步的细节，让我得以顺利过关。&lt;/p&gt;
&lt;p&gt;反过来看，这也是它们存在的意义吧。博客不一定要有多少更新、多少阅读量、有多么高大上，只要在某个时刻它帮到了某个人，那它就很有价值。所以，看似被遗忘的内容，其实都还藏着被再次发现和利用的可能——我自己就是这样真实受益的那个人。&lt;/p&gt;
&lt;p&gt;下面记录我搭建这个博客的过程吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 class="heading" id="工作主流程"&gt;
 工作主流程
 &lt;a class="anchor" href="#%e5%b7%a5%e4%bd%9c%e4%b8%bb%e6%b5%81%e7%a8%8b"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;











&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="|525" src="https://webp.050612.xyz/2025/07/20250715234651888.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;笔记软件: &lt;a href="https://obsidian.md%22/"&gt;Obsidian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;框架: &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;主题: &lt;a href="https://github.com/tomfran/typo"&gt;typo:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;远程同步: &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;渲染 &amp;amp; 发布: Github Action &amp;amp; Github Page&lt;/li&gt;
&lt;li&gt;Dns 托管: &lt;a href="https://cloudflare.com/"&gt;Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 class="heading" id="搭建步骤"&gt;
 搭建步骤
 &lt;a class="anchor" href="#%e6%90%ad%e5%bb%ba%e6%ad%a5%e9%aa%a4"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h2 class="heading" id="hugo"&gt;
 Hugo
 &lt;a class="anchor" href="#hugo"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;像我这样先选了主题，再了解博客框架的人应该不多吧。Hugo 是一个使用 Go 语言编写的&lt;strong&gt;静态网站生成器&lt;/strong&gt;，以其&lt;strong&gt;高性能、易用性和灵活性&lt;/strong&gt;而广受欢迎。可以把 Markdown 文件转化成 HTML 文件。但是静态博客也有缺点，维护难，可扩展性较弱，上手门槛高，希望我能坚持下去吧。&lt;/p&gt;
&lt;h3 class="heading" id="hugo下载安装"&gt;
 Hugo下载安装
 &lt;a class="anchor" href="#hugo%e4%b8%8b%e8%bd%bd%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先在 &lt;a href="https://github.com/gohugoio/hugo/releases"&gt;Release&lt;/a&gt; 根据操作系统以及指令集下载最新版本的 Hugo 压缩包
Windows 则选择例如: &lt;code&gt;hugo_0.148.1_windows-amd64.zip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择合适的路径进行解压&lt;/li&gt;
&lt;li&gt;添加环境变量，在搜索框搜索&lt;code&gt;环境变量&lt;/code&gt;，根据解压路径配置hugo.exe所在的路径到PATH&lt;/li&gt;
&lt;li&gt;打开一个终端，输入&lt;code&gt;hugo version&lt;/code&gt;验证&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class="heading" id="初始化hugo结构"&gt;
 初始化Hugo结构
 &lt;a class="anchor" href="#%e5%88%9d%e5%a7%8b%e5%8c%96hugo%e7%bb%93%e6%9e%84"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;hugo new site xxxx&lt;/code&gt;创建网站初始结构。
初始结构如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;archetypes&lt;/strong&gt;：存放用 hugo 命令新建的 Markdown 文件应用的 front matter 模版&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt;：存放内容页面，比如「博客」、「读书笔记」等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;layouts&lt;/strong&gt;：存放定义网站的样式，写在&lt;code&gt;layouts&lt;/code&gt;文件下的样式会覆盖安装的主题中的 &lt;code&gt;layouts&lt;/code&gt;文件同名的样式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;static&lt;/strong&gt;：存放所有静态文件，如图片&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;：存放创建站点时 Hugo 使用的其他数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public&lt;/strong&gt;：存放 Hugo 生成的静态网页&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;themes&lt;/strong&gt;：存放主题文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;config.toml&lt;/strong&gt;：网站配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class="heading" id="typo"&gt;
 Typo
 &lt;a class="anchor" href="#typo"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;正像github上介绍的，Typo 是一个以简洁为基础的主题。目标是创建一个以内容为中心，没有任何其他多余内容的网站。直观感受是具有纯粹的阅读体验。&lt;/p&gt;
&lt;h3 class="heading" id="typo主题配置"&gt;
 Typo主题配置
 &lt;a class="anchor" href="#typo%e4%b8%bb%e9%a2%98%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;不同主题一般都在相应的wiki中给出了配置指南。按照流程配置即可。需要格外注意的是，建议直接使用主题给出的&lt;code&gt;hugo.toml&lt;/code&gt; 配置文件作为基础，在这个基础之上进行配置可以避免一些奇怪的问题。&lt;/p&gt;
&lt;h3 class="heading" id="本地测试"&gt;
 本地测试
 &lt;a class="anchor" href="#%e6%9c%ac%e5%9c%b0%e6%b5%8b%e8%af%95"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;到这一步即可进行本地测试，在博客主文件夹下运行命令:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再打开输出的网址即可&lt;/p&gt;
&lt;h2 class="heading" id="工作流搭建"&gt;
 工作流搭建
 &lt;a class="anchor" href="#%e5%b7%a5%e4%bd%9c%e6%b5%81%e6%90%ad%e5%bb%ba"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建 2 个 GitHub 仓库
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;博客源仓库&lt;/strong&gt;：储存所有 Markdown 源文件（博客内容），和博客中用到的图片等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub Pages 仓库&lt;/strong&gt;：储存由 Hugo 从Markdown 文件生成的 HTML 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将在&lt;strong&gt;博客源仓库&lt;/strong&gt;中 Hugo 生成的静态 HTML 文件部署到 &lt;strong&gt;GitHub Pages 仓库&lt;/strong&gt;中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我学习替他博主的思路。我将博客源码存放到一个private repo里。但也可以将源码直接放到github pages repo中（只需要单独一个远程仓库即可），但这样其他人能获取文章的源文件。&lt;/p&gt;
&lt;h3 class="heading" id="创建博客源仓库"&gt;
 创建博客源仓库
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e5%8d%9a%e5%ae%a2%e6%ba%90%e4%bb%93%e5%ba%93"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;命名&lt;strong&gt;博客源仓库&lt;/strong&gt;（whatever you want）&lt;/li&gt;
&lt;li&gt;勾选 &lt;strong&gt;Private&lt;/strong&gt;，设置为私有仓库。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class="heading" id="创建-github-page-仓库"&gt;
 创建 GitHub Page 仓库
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba-github-page-%e4%bb%93%e5%ba%93"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;命名 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 仓库，这个仓库必须使用特殊的命名格式 &lt;code&gt;&amp;lt;username.github.io&amp;gt;&lt;/code&gt;， &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; 是自己的 GitHub 的用户名。&lt;/li&gt;
&lt;li&gt;勾选 &lt;strong&gt;Public&lt;/strong&gt;，设置为公开仓库。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class="heading" id="添加cname文件到static文件夹使用自定义域名的额外步骤"&gt;
 添加CNAME文件到static/文件夹（使用自定义域名的额外步骤）
 &lt;a class="anchor" href="#%e6%b7%bb%e5%8a%a0cname%e6%96%87%e4%bb%b6%e5%88%b0static%e6%96%87%e4%bb%b6%e5%a4%b9%e4%bd%bf%e7%94%a8%e8%87%aa%e5%ae%9a%e4%b9%89%e5%9f%9f%e5%90%8d%e7%9a%84%e9%a2%9d%e5%a4%96%e6%ad%a5%e9%aa%a4"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;如果选择为Github Pages使用自定义域名，则这个步骤必须要做，否则自定义域名会隔三差五失效。&lt;/p&gt;
&lt;p&gt;原因在于，当在&lt;code&gt;YOUR_NAME.github.io&lt;/code&gt;这个仓库的设置里手动添加自定义域名的时候，其实是在github仓库新增了一个CNAME文件，里面内容为自定义域名。&lt;/p&gt;
&lt;p&gt;但是每次推送触发actions后，hugo命令都会生成一个全新的public文件夹并强制覆盖到page仓库。这个操作都会覆盖掉github上的CNAME，导致域名失效。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;hugo&lt;/code&gt; 构建网站时，它会把 &lt;code&gt;static&lt;/code&gt; 文件夹里的&lt;strong&gt;所有内容&lt;/strong&gt;，原封不动地、完整地复制到最终生成的 &lt;code&gt;public&lt;/code&gt; 文件夹的根目录下。所以在static文件夹下添加一个CNAME文件即可。&lt;/p&gt;
&lt;h3 class="heading" id="推送到博客源仓库"&gt;
 推送到博客源仓库
 &lt;a class="anchor" href="#%e6%8e%a8%e9%80%81%e5%88%b0%e5%8d%9a%e5%ae%a2%e6%ba%90%e4%bb%93%e5%ba%93"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建gitignore文件&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-.gitignore" data-lang=".gitignore"&gt;# Hugo
public/
.hugo_build.lock
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="2"&gt;
&lt;li&gt;推送到远程仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;# === 项目初始化与首次提交 ===
echo &amp;#34;# my-blog-source&amp;#34; &amp;gt;&amp;gt; README.md
git init
git add .
git commit -m &amp;#34;first commit&amp;#34;
git branch -M main
git remote add origin https://github.com/xxx/xxx.git
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;&lt;h2 class="heading" id="自动发布内容"&gt;
 自动发布内容
 &lt;a class="anchor" href="#%e8%87%aa%e5%8a%a8%e5%8f%91%e5%b8%83%e5%86%85%e5%ae%b9"&gt;#&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;使用Github Actions功能实现提交源码后自动发布。&lt;/p&gt;
&lt;h3 class="heading" id="生成actions-secrets"&gt;
 生成Actions secrets
 &lt;a class="anchor" href="#%e7%94%9f%e6%88%90actions-secrets"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成Personal access tokens 首先点击github头像在下拉栏里进入Setting-&amp;gt;Developer Settings-&amp;gt;Personal access tokens -&amp;gt; tokens (classic)












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716010922097.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;

选择Generate new token，点击Generate token生成token，并先复制保存该token。(这个token只有显示一次，所以一定要复制保存)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成Actions secrets 接下来在源码repo中添加上面的personal access token：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进入repo的Settings-&amp;gt;Secrets and variable一栏，选择New repository secret












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716011218953.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;名称自取，Secret复制上面生成的Personal access tokens












&lt;figure class=""&gt;

 &lt;div class="img-container" &gt;
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716011226467.png" &gt;
 &lt;/div&gt;

 
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 class="heading" id="配置actions文件"&gt;
 配置actions文件
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%aeactions%e6%96%87%e4%bb%b6"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;在repo根目录新建嵌套的两个文件夹.github/workflows&lt;/p&gt;
&lt;p&gt;在workflows里新建一个后缀为.yml的配置文件，名字自取。&lt;/p&gt;
&lt;p&gt;写进去以下配置（从hugo官方文档修改而来）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;name: github pages &lt;span style="color:#888;font-style:italic"&gt;# 名字自取&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;on:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; push:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; branches:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - main &lt;span style="color:#888;font-style:italic"&gt;# 这里的意思是当 main分支发生push的时候，运行下面的jobs，这里先改为github-actions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;jobs:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; deploy: &lt;span style="color:#888;font-style:italic"&gt;# 任务名自取&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; runs-on: ubuntu-latest	# 在什么环境运行任务
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; steps:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - uses: actions/checkout@v2	# 引用actions/checkout这个action，与所在的github仓库同名
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; with:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; submodules: &lt;span style="font-weight:bold;text-decoration:underline"&gt;true&lt;/span&gt; &lt;span style="color:#888;font-style:italic"&gt;# Fetch Hugo themes (true OR recursive) 获取submodule主题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fetch-depth: 0 &lt;span style="color:#888;font-style:italic"&gt;# Fetch all history for .GitInfo and .Lastmod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - name: Setup Hugo	# 步骤名自取
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uses: peaceiris/actions-hugo@v2	# hugo官方提供的action，用于在任务环境中获取hugo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; with:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; hugo-version: &lt;span style="color:#666;font-style:italic"&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;	&lt;span style="color:#888;font-style:italic"&gt;# 获取最新版本的hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# extended: true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - name: Build
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; run: hugo --minify	# 使用hugo构建静态网页
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - name: Deploy
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uses: peaceiris/actions-gh-pages@v3	# 一个自动发布github pages的action
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; with:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#888;font-style:italic"&gt;# github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同repo的情况，不能用于发布到其他repo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; external_repository: 用户名/page仓库名	# 发布到哪个repo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; personal_token: ${{ secrets.token名 }}	# 发布到其他repo需要提供上面生成的personal access token
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; publish_dir: ./public	# 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; publish_branch: main	# 发布到哪个branch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;yml文件中只需要改&lt;code&gt;external_repository&lt;/code&gt;为自己的github page仓库，&lt;code&gt;personal_token: ${{ secrets.XXX }}&lt;/code&gt; 改成前面步骤生成Actions Secrets中取的名称。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;至此，折腾了半天的自动化流程，总算是搭建完成了。&lt;/p&gt;
&lt;p&gt;现在，我终于可以再关心部署的流程细节，把精力放回到最初的目的上——去记录，去成为那些曾经帮助过我的、‘蒙灰的博客’中的一员。&lt;/p&gt;
&lt;p&gt;也许我的文章也会很简单，甚至有些简陋，也可能会在未来的某个时刻被遗忘在角落里。但只要它能在某个时刻，帮到某个卡在同样问题上的人，让他得以顺利过关，那这一切的折腾就都值了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hello, Typo！&lt;/strong&gt;&lt;/p&gt;</description></item></channel></rss>