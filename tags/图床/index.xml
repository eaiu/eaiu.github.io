<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>图床 on G-Hung的博客</title><link>https://blog.yzyy.de/tags/%E5%9B%BE%E5%BA%8A/</link><description>Recent content in 图床 on G-Hung的博客</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 29 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.yzyy.de/tags/%E5%9B%BE%E5%BA%8A/index.xml" rel="self" type="application/rss+xml"/><item><title>图床搭建(Cloudflare R2 + WebP Cloud + PicList)</title><link>https://blog.yzyy.de/explore/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</link><pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.yzyy.de/explore/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</guid><description>&lt;h2 class="heading" id="前言">
 前言
 &lt;a class="anchor" href="#%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h2>
&lt;p>本篇基于&lt;a href="https://www.pseudoyu.com/zh/2024/06/30/free_image_hosting_system_using_r2_webp_cloud_and_picgo/">从零开始搭建你的免费图床系统（Cloudflare R2 + WebP Cloud + PicGo） · Pseudoyu&lt;/a>教程书写，根据自己的习惯以及相关工具的迭代更新所书写。&lt;/p>
&lt;p>本篇是关于图床系统的解决方案。&lt;/p>
&lt;p>有搭建图床的念头是因为通过Web插件经常clip精品文章，在这些文章中有大量外链图片，或许哪一天挂了就会出问题。最近又部署了个人博客，搭建一个图床系统迫在眉睫。&lt;/p>
&lt;h3 class="heading" id="cloudflare-r2--webp-cloud--picgo">
 Cloudflare R2 + WebP Cloud + PicGo
 &lt;a class="anchor" href="#cloudflare-r2--webp-cloud--picgo">#&lt;/a>
&lt;/h3>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716103644466.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>早就听过Cloudflare的R2对象存储服务，还有B2（Backblaze）什么的。&lt;/p>
&lt;p>赛博菩萨 Cloudflare 提供的 R2 对象存储这一服务，免费计划中有每月 10 GB 的存储容量，对于个人使用来说完全够用，大厂的服务与数据安全也有保障。&lt;/p>
&lt;p>为了优化用户的访问，又使用了一个「&lt;a href="https://webp.se/">WebP Cloud&lt;/a>」服务对 R2 的图片进行代理，在代理层面进一步减小图片体积，虽然对于国内用户来说速度肯定还是比不上阿里云 OSS 这种线路，但是在不用备案、稳定且免费的综合条件下，这是我能想到的最好的方案了。&lt;/p>
&lt;p>在电脑端同样是通过 PicGo 客户端几乎一键上传并生成博客直接可用的 markdown 图片链接，配置完成后使用起来很顺滑。&lt;/p>
&lt;h2 class="heading" id="图床搭建说明">
 图床搭建说明
 &lt;a class="anchor" href="#%e5%9b%be%e5%ba%8a%e6%90%ad%e5%bb%ba%e8%af%b4%e6%98%8e">#&lt;/a>
&lt;/h2>
&lt;p>Cloudflare R2 + WebP Cloud + PicGo 的方案尽管牵扯到了多个组件和平台，但所有操作都在 Free Plan 中，也是我最终选定的方案，下面将从零开始介绍如何搭建这个免费图床系统。&lt;/p>
&lt;h3 class="heading" id="cloudflare-r2">
 Cloudflare R2
 &lt;a class="anchor" href="#cloudflare-r2">#&lt;/a>
&lt;/h3>
&lt;p>R2 是 Cloudflare 推出的免费对象存储服务，需要免费注册一个 &lt;a href="https://www.cloudflare.com/zh-cn/">Cloudflare 账号&lt;/a>才能使用，注册登录后，点击左侧边栏的 R2 访问服务，但需要注意的是开通 R2 服务需要绑定信用卡（国内外主流信用卡皆可），但并不会扣费，主要是为了验证用户身份使用。&lt;/p>
&lt;h4 class="heading" id="创建图床-bucket">
 创建图床 Bucket
 &lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba%e5%9b%be%e5%ba%8a-bucket">#&lt;/a>
&lt;/h4>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716103957488.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>开通 R2 服务后，点击右上角「创建存储桶」按钮进行创建。&lt;/p>
&lt;p>进入创建配置界面后，需要填写存储桶（Bucket）名称，建议有一些辨识度，后续在配置上传时会用到。&lt;/p>
&lt;p>位置则选择「自动」，但可以额外多配置一个位置提示，由于我后续还将使用「&lt;a href="https://webp.se/">WebP Cloud&lt;/a>」服务的美西机房进行图片代理优化，所以在此处选择的是「北美洲西部（WNAM）」，根据需求选其他区域也可以，但 Cloudflare 并不保证一定会分配到所指定的区域。&lt;/p>
&lt;p>点击「创建存储桶」按钮即完成创建，此时我们已经可以向我们的存储桶上传文件了，可以选择在网页直接上传文件或文件夹。&lt;/p>
&lt;p>也可以使用 S3 API 进行上传，我们后续使用 PicGo 客户端进行上传就依赖这种方式，但需要进行一些额外配置，点击导航栏「设置」选项进行配置。&lt;/p>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716104739846.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>首先我们需要打开「R2.dev 子域」，这是为了后续访问图片时需要的公网地址，点击「允许访问」，并按照提示输入「allow」即可开启。












&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716104806788.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>完成后会显示一个以 &lt;code>r2.dev&lt;/code> 结尾的公网网址，即我们后续访问图片的网址。












&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716104823644.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;h4 class="heading" id="自定义图床域名可选">
 自定义图床域名（可选）
 &lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e5%9b%be%e5%ba%8a%e5%9f%9f%e5%90%8d%e5%8f%af%e9%80%89">#&lt;/a>
&lt;/h4>
&lt;p>但是分配的网址比较长，不易于记忆，我们可以通过「自定义域」来绑定我们的专属域名，点击「连接域」按钮。&lt;/p>
&lt;p>输入自己想绑定的域名，点击继续。












&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716104920972.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716104954128.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>连接域，并等待 DNS 解析生效即可。&lt;/p>
&lt;p>完成后 bucket 状态处「公共 URL 访问」显示“已允许”，且「域」显示为我们刚自定义的域名即配置成功。&lt;/p>
&lt;h4 class="heading" id="配置-bucket-访问-api">
 配置 Bucket 访问 API
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae-bucket-%e8%ae%bf%e9%97%ae-api">#&lt;/a>
&lt;/h4>
&lt;p>每次都要打开 Cloudflare 页面手动上传图片的方式显然不够便捷。R2 提供了 S3 兼容的 API，可以方便地使用一些客户端/命令行工具进行上传、删除等操作。&lt;/p>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716105046500.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>回到 R2 主页面，点击右上角「管理 R2 API 令牌」，进入后点击「创建 API 令牌」。












&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716105230904.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>输入令牌名称，「权限」选择“对象读和写”并将此 API 指定之前所创建的 Bucket，这样最小化权限也保障数据安全，其余选项保持默认即可。&lt;/p>
&lt;p>完成创建后会显示所有密钥，我们使用 PicGo 需要的是下面三个信息，不过因为只会显示一次，建议在密码管理软件或其他地方妥善保管好这些参数信息。












&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716105529633.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>至此，我们需要在 Cloudflare R2 上配置的部分就完成了，接下来我们需要配置 PicGo 客户端。&lt;/p>
&lt;h3 class="heading" id="picgo-piclist">
 PicGo-&amp;gt;PicList
 &lt;a class="anchor" href="#picgo-piclist">#&lt;/a>
&lt;/h3>
&lt;p>PicGo 是一个用于快速上传并获取图片 URL 的工具软件，有着较为丰富的插件生态，支持多种图床服务，其 GitHub 仓库为「&lt;a href="https://github.com/Molunerfinn/PicGo">GitHub - Molunerfinn/PicGo&lt;/a>」，可以下载对应平台客户端使用。&lt;/p>
&lt;p>我的主要需求是配合Obsidian使用，在配置Obsidian的「Image auto upload」插件时，发现了PicGo的二开项目：&lt;/p>
&lt;p>&lt;a href="https://github.com/Kuingsmile/PicList">GitHub - Kuingsmile/PicList&lt;/a>&lt;/p>
&lt;p>相较于PicGo：&lt;/p>
&lt;ul>
&lt;li>支持第二图床同步上传&lt;/li>
&lt;li>支持通过API实现云端删除&lt;/li>
&lt;li>内置图床额外添加了WebDav、本地图床和SFTP等&lt;/li>
&lt;/ul>
&lt;p>具体请自行查看&lt;a href="https://github.com/Kuingsmile/PicList/blob/dev/README_cn.md#%E7%89%B9%E8%89%B2%E5%8A%9F%E8%83%BD">PicList特色功能&lt;/a>&lt;/p>
&lt;h4 class="heading" id="配置-r2-图床">
 配置 R2 图床
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae-r2-%e5%9b%be%e5%ba%8a">#&lt;/a>
&lt;/h4>
&lt;p>PicGo 本体并不包括 S3 图床，但可以通过「&lt;a href="https://github.com/wayjam/picgo-plugin-s3">GitHub - wayjam/picgo-plugin-s3&lt;/a>」插件来支持。&lt;/p>
&lt;p>如果出现安装转圈，可以尝试手动安装：&lt;/p>
&lt;ul>
&lt;li>在&lt;code>C:\Users\user\AppData\Roaming\picgo&lt;/code>打开终端。&lt;/li>
&lt;li>运行&lt;code>npm install picgo-plugin-s3&lt;/code>,观察是否有报错，等待完成后重启picgo即可发现在多了一个Amazon S3的图床设置。&lt;/li>
&lt;/ul>
&lt;p>出现问题的原因：&lt;/p>
&lt;ul>
&lt;li>安装过程中出现了报错，很有可能是nodejs版本过低的原因。












&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="node版本要求" src="https://webp.050612.xyz/2025/02/20250205232413441.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/li>
&lt;/ul>
&lt;p>在「插件设置」中选择安装，「图床设置」中就新增了 Amazon S3 选项。点击进入配置选项。&lt;/p>
&lt;ul>
&lt;li>PicList












&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716105923081.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/li>
&lt;/ul>
&lt;p>这里有几项配置需要尤其注意。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>应用密钥 ID&lt;/strong>，填写 R2 API 中的 Access Key ID（访问密钥 ID）&lt;/li>
&lt;li>&lt;strong>应用密钥&lt;/strong>，填写 R2 API 中的 Secret Access Key（机密访问密钥）&lt;/li>
&lt;li>&lt;strong>桶名&lt;/strong>，填写 R2 中创建的 Bucket 名称&lt;/li>
&lt;li>&lt;strong>文件路径&lt;/strong>，上传到 R2 中的文件路径，我选择使用 &lt;code>{year}/{month}/{fullName}&lt;/code> 来初步分文件夹并保留原文件的文件名和扩展名。&lt;/li>
&lt;li>&lt;strong>自定义节点&lt;/strong>，填写 R2 API 中的「为 S3 客户端使用管辖权地特定的终结点」，即 &lt;code>xxx.r2.cloudflarestorage.com&lt;/code> 格式的 S3 Endpoint&lt;/li>
&lt;li>&lt;strong>自定义输出URL模板&lt;/strong>，如果在创建R2时使用了自定义域，需要修改此项，并且注意要和&amp;lt;文件路径&amp;gt;一项对应，先上传一张图片，去cf查看图片链接，获得生成逻辑再进行相应填写。&lt;/li>
&lt;/ul>
&lt;p>占位符详情请查看：&lt;/p>
&lt;p>&lt;a href="https://github.com/wayjam/picgo-plugin-s3">GitHub - wayjam/picgo-plugin-s3: PicGo S3 插件&lt;/a>&lt;/p>
&lt;p>其他配置保持默认即可，确认参数无误后点击「确定」与「设置为默认图床」即可。&lt;/p>
&lt;h4 class="heading" id="图片上传">
 图片上传
 &lt;a class="anchor" href="#%e5%9b%be%e7%89%87%e4%b8%8a%e4%bc%a0">#&lt;/a>
&lt;/h4>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="20250716110818243" src="https://webp.050612.xyz/2025/07/20250716110818243.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>完成上述配置后，我们就可以在「上传区」直接拖入文件进行图片上传了，如上传后显示无误则为配置成功，生成的链接会自动在系统剪贴板中，直接在需要的地方粘贴即可。&lt;/p>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="20250716110939261" src="https://webp.050612.xyz/2025/07/20250716110939261.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>并且可以在链接格式处选择对应格式，如 URL 或是博客可用的 Markdown 格式链接等。这里我还做了一个小的配置，在左侧「PicGo 设置」 - 「自定义链接格式」中修改为 &lt;code>![$fileName]($url)&lt;/code>，并在上传区的链接格式处选择了「Custom」，这样我上传后就会根据文件名生成以文件名为 Alt 文本的 Markdown 图片链接。&lt;/p>
&lt;h3 class="heading" id="webp-cloud-图片优化">
 WebP Cloud 图片优化
 &lt;a class="anchor" href="#webp-cloud-%e5%9b%be%e7%89%87%e4%bc%98%e5%8c%96">#&lt;/a>
&lt;/h3>
&lt;p>至此我们已经完成了整个图床的搭建、配置和上传，但通常我们本地截图或是相机拍摄的图片体积较大，对于访客来说加载时间会较长，并不直接适合互联网发布。&lt;/p>
&lt;p>这次更换图床方案后也开始寻找更智能的图片优化服务，想到了「&lt;a href="https://webp.se/">WebP Cloud&lt;/a>」。
打开了官网「&lt;a href="https://webp.se/">webp.se&lt;/a>」看了一下更为详细的介绍。&lt;/p>
&lt;p>简单来说这是一个类 CDN 的图片代理 SaaS 服务，可以在几乎不改变画质的情况下大幅缩小图片体积，加快整体站点加载速度。发展到现在除了图片体积减少外，还提供了缓存、添加水印、图片滤镜等更多实用的功能，并提供了自定义 Header 等配置选项。&lt;/p>
&lt;p>看了一圈，觉得能很好满足我的博客图片优化需求，开始折腾配置。&lt;/p>
&lt;h4 class="heading" id="配置-webp-cloud">
 配置 WebP Cloud
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae-webp-cloud">#&lt;/a>
&lt;/h4>
&lt;p>首先通过 GitHub 授权登录 &lt;a href="https://dashboard.webp.se/">WebP Cloud&lt;/a> 平台。&lt;/p>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716111504411.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>页面非常直观，主要显示了当前 Plan 下的 Free Quota 和额外 Quota 的数据，以及一些用量统计。&lt;/p>
&lt;p>点击「Create Proxy」按钮可以添加配置。&lt;/p>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716111814390.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;ul>
&lt;li>为了优化国内访问，我「Proxy Region」选择的是美西「Hillsboro, OR」区域&lt;/li>
&lt;li>「Proxy Name」填写一个自定义名称即可&lt;/li>
&lt;li>「Proxy Origin URL」，比较重要，需要填写上文我们配置好的 R2 自定义域名，如我填写的是 &lt;code>image.yzyy.de&lt;/code>，如果没配置自定义域名则填写 R2 提供的 &lt;code>xxx.r2.dev&lt;/code> 格式的域名&lt;/li>
&lt;/ul>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="" src="https://webp.050612.xyz/2025/07/20250716112113344.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>图中 Basic info 部分「Visitor」下显示的以 &lt;code>xxx.webp.li&lt;/code> 格式即为我们的代理地址。&lt;/p>
&lt;h5 class="heading" id="自定义域名">
 自定义域名
 &lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e5%9f%9f%e5%90%8d">#&lt;/a>
&lt;/h5>
&lt;p>支持了自定义配置域名，详细教程可参考「&lt;a href="https://docs.webp.se/webp-cloud/custom-domain/">Custom Domain | WebP Cloud Services Docs&lt;/a>」。&lt;/p>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="添加域名解析" src="https://webp.050612.xyz/2025/02/Pasted%20image%2020250206175133.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;h4 class="heading" id="更改-picgo-配置">
 更改 PicGo 配置
 &lt;a class="anchor" href="#%e6%9b%b4%e6%94%b9-picgo-%e9%85%8d%e7%bd%ae">#&lt;/a>
&lt;/h4>
&lt;p>











&lt;figure class="">

 &lt;div class="img-container" >
 &lt;img loading="lazy" alt="change_pic_go_config" src="https://webp.050612.xyz/2025/02/change_pic_go_config.png" >
 &lt;/div>

 
&lt;/figure>
&lt;/p>
&lt;p>需要注意的是，由于我们最终需要放在博客中的图片是经过 WebP Cloud 代理过的链接，所以需要回到 PicGo 的「图床设置」中，将「自定义域名」改为我们刚配置的 WebP Cloud 代理地址，即格式为 &lt;code>xxx.webp.li&lt;/code> 的代理链接或其他自定义域名。&lt;/p>
&lt;h4 class="heading" id="webp-cloud-用量">
 WebP Cloud 用量
 &lt;a class="anchor" href="#webp-cloud-%e7%94%a8%e9%87%8f">#&lt;/a>
&lt;/h4>
&lt;p>免费用户每天有 2000 Free Quota，即能够代理 2000 次图片访问请求，并提供 100M 的图片缓存，对于一般用户来说完全够用，如有一些流量较大的特定时期也可以购买额外 Quota，价格很便宜。&lt;/p>
&lt;p>如超过了 Quota，访问则会被 301 转发到源站图片地址，不经 WebP Cloud 服务压缩，但依然可用；超过 100M 的缓存则会按照 LRU 算法清理，所以依然能够保障一些高频请求的图片能够有较好的访问体验。&lt;/p>
&lt;h2 class="heading" id="备用方案">
 备用方案
 &lt;a class="anchor" href="#%e5%a4%87%e7%94%a8%e6%96%b9%e6%a1%88">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>tg方案&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://github.com/x-dr/telegraph-Image">GitHub - x-dr/telegraph-Image&lt;/a>&lt;/p>
&lt;h2 class="heading" id="与obsidian集成">
 与Obsidian集成
 &lt;a class="anchor" href="#%e4%b8%8eobsidian%e9%9b%86%e6%88%90">#&lt;/a>
&lt;/h2>
&lt;p>如果使用的是 &lt;a href="https://obsidian.md/">obsidian&lt;/a> 进行博客写作，推荐将 Picgo 与 obsidian &lt;a href="https://github.com/renmu123/obsidian-image-auto-upload-plugin">Image Auto Upload Plugin&lt;/a> 插件结合使用，这样可以一键上传文章中所有图片。&lt;/p></description></item></channel></rss>